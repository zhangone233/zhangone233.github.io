<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>One&#39;s Blog</title>
  
  <subtitle>副标题</subtitle>
  <link href="https://zhangone.site/atom.xml" rel="self"/>
  
  <link href="https://zhangone.site/"/>
  <updated>2023-07-03T17:55:18.000Z</updated>
  <id>https://zhangone.site/</id>
  
  <author>
    <name>zhangone</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Rsync - 文件上传</title>
    <link href="https://zhangone.site/posts/bb403fd8/"/>
    <id>https://zhangone.site/posts/bb403fd8/</id>
    <published>2023-07-03T17:55:18.000Z</published>
    <updated>2023-07-03T17:55:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近小站从之前的github托管迁移到了阿里云服务器上，遇到了需要上传本地文件至远程服务器的场景。之前也有了解过<strong>FTP</strong>、<strong>SCP</strong>、<strong>FileZilla</strong>等上传工具，但自己觉得并不太想用。于是在寻找的过程，在MDN上看到了 <strong>Rsync</strong>。</p><blockquote><p>(不要问为什么当看到 <strong>Rsync</strong> 时就想用了😈？问就是：相比较来说，这名字很酷😎不是么)</p><img src="https://img.soogif.com/Bh2TBPM9jBCO1YIyy3tZGjLnM6Xugeka.gif_s400x0" alt="" style="zoom:67%;" /></blockquote><h1 id="Rsync-简介"><a href="#Rsync-简介" class="headerlink" title="Rsync 简介"></a>Rsync 简介</h1><blockquote><p><a href="https://developer.mozilla.org/en-US/docs/Glossary/Rsync">Rsync</a>是一种本地到远程的文件同步工具，通常在大多数基于 <strong>Unix</strong> 的系统（如 macOS 和 Linux）上都可用，但也存在 Windows 版本。<br>它被视为比 SFTP 更高级工具，因为它默认是在命令行中使用的。</p></blockquote><span id="more"></span><p>Rsync是一个非常强大和灵活的文件传输工具，通常用于在本地和远程服务器之间进行文件同步和备份操作。它可以通过 SSH 协议安全地传输文件，并且具有增量传输的能力，只传输发生更改的文件部分，从而提高效率。</p><p>rsync的优点包括：</p><ol><li>快速和高效：rsync使用智能算法，只传输文件的更改部分，可以大大减少传输时间和带宽消耗。</li><li>增量传输：rsync只传输源和目标文件之间的差异，而不是整个文件，这对于大型文件或带宽有限的连接尤其有用</li><li>强大的过滤功能：rsync允许你指定文件和目录的过滤规则，以便选择性地同步文件。</li><li>支持远程传输：rsync可以通过SSH协议进行安全的远程传输，保护数据的安全性。</li><li>可以继续中断的传输：如果传输过程中发生中断，rsync可以从上次中断的地方继续传输，而无需重新开始。</li></ol><p>适合需要频繁文件同步和备份的场景。</p><h1 id="使用记录"><a href="#使用记录" class="headerlink" title="使用记录"></a>使用记录</h1><p><strong>macOS</strong> 系统预装自带 <strong>Rsync</strong>, 直接开箱使用！</p><p>这里我准备把刚申请的免费<strong>SSL证书</strong>上传到服务器上，放置在<code>Nginx</code>的默认配置文件目录下。<br>不同的<code>Nginx</code>版本的默认配置目录好像还不一样，网络上大多都是在<code>/usr/local/nginx/conf</code> 。而我这里的<code>Nginx</code>默认配置目录是在 <code>/etc/nginx/nginx.conf</code> , 先在<code>/etc/nginx/</code>下创建一个名为 <strong>cert</strong> 的目录，用于存放等下上传来的证书文件。</p><p><strong>在远程服务器上执行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /etc/nginx    <span class="comment"># 进入默认配置目录</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> cert       <span class="comment"># 创建cert证书存放文件夹（权限如果不够需要在前面加 sudo）</span></span><br></pre></td></tr></table></figure><p><strong>在本地机器上执行：</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里本地存放证书及私钥文件的目录是 /Users/zhangone/SSL</span></span><br><span class="line"></span><br><span class="line">rsync /Users/zhangone/SSL/zhangone.site.key root@xx.xxx.xx.xxx:/etc/nginx/cert/</span><br><span class="line">rsync /Users/zhangone/SSL/zhangone.site.pem root@xx.xxx.xx.xxx:/etc/nginx/cert/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每次执行上传命令，都要输入远程服务器密码。</span></span><br></pre></td></tr></table></figure><p>此时在远程服务器上发现文件已经上传成功</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 在 /etc/nginx/cert/ 目录下执行</span></span><br><span class="line">$ <span class="built_in">ls</span></span><br><span class="line">zhangone.site.key  zhangone.site.pem</span><br></pre></td></tr></table></figure><p>ok, 到此上传结束，可以去配置nginx了。<br><img src="https://img.soogif.com/LkzJxEm0gWJDeSl9r8iR9Rry3Ls4aAgI.gif_s400x0" style="zoom:50%;" /></p><h1 id="更多命令"><a href="#更多命令" class="headerlink" title="更多命令"></a>更多命令</h1><p><a href="https://linux.die.net/man/1/rsync">Rsync手册</a></p><ol><li><p>从本地上传文件到远程服务器：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync [源文件夹路径] [服务器账号@服务器ip地址:目标路径]</span><br></pre></td></tr></table></figure></li><li><p>从远程服务器下载文件到本地：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync [服务器账号@服务器ip地址:/目录路径/源文件] [目标路径]</span><br></pre></td></tr></table></figure></li><li><p>同步本地文件夹到远程服务器：</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rsync -avz [源文件夹路径] [服务器账号@服务器ip地址:目标路径]</span><br></pre></td></tr></table></figure><p>常用选项说明：</p><ul><li><code>-a</code>：归档模式，保持文件属性和递归复制子目录。</li><li><code>-v</code>：详细输出，显示正在进行的操作。</li><li><code>-z</code>：启用压缩传输，减少数据传输量。</li><li><code>-r</code>：递归复制子目录。</li><li><code>-u</code>：只复制更新的文件。</li><li><code>-P</code>：显示传输进度和继续中断的传输。</li><li><code>--delete</code>：删除目标目录中不存在于源目录中的文件。</li></ul></li></ol><p>rsync还有许多其他选项和功能，可以使用<code>man rsync</code>命令在命令行中查看rsync的详细文档。</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;最近小站从之前的github托管迁移到了阿里云服务器上，遇到了需要上传本地文件至远程服务器的场景。之前也有了解过&lt;strong&gt;FTP&lt;/strong&gt;、&lt;strong&gt;SCP&lt;/strong&gt;、&lt;strong&gt;FileZilla&lt;/strong&gt;等上传工具，但自己觉得并不太想用。于是在寻找的过程，在MDN上看到了 &lt;strong&gt;Rsync&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;(不要问为什么当看到 &lt;strong&gt;Rsync&lt;/strong&gt; 时就想用了😈？问就是：相比较来说，这名字很酷😎不是么)&lt;/p&gt;
&lt;img src=&quot;https://img.soogif.com/Bh2TBPM9jBCO1YIyy3tZGjLnM6Xugeka.gif_s400x0&quot; alt=&quot;&quot; style=&quot;zoom:67%;&quot; /&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;Rsync-简介&quot;&gt;&lt;a href=&quot;#Rsync-简介&quot; class=&quot;headerlink&quot; title=&quot;Rsync 简介&quot;&gt;&lt;/a&gt;Rsync 简介&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Glossary/Rsync&quot;&gt;Rsync&lt;/a&gt;是一种本地到远程的文件同步工具，通常在大多数基于 &lt;strong&gt;Unix&lt;/strong&gt; 的系统（如 macOS 和 Linux）上都可用，但也存在 Windows 版本。&lt;br&gt;它被视为比 SFTP 更高级工具，因为它默认是在命令行中使用的。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="工具" scheme="https://zhangone.site/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
    <category term="tool" scheme="https://zhangone.site/tags/tool/"/>
    
  </entry>
  
  <entry>
    <title>Waline评论系统终终终终终于能用了~</title>
    <link href="https://zhangone.site/posts/c0155143/"/>
    <id>https://zhangone.site/posts/c0155143/</id>
    <published>2022-12-27T18:01:55.000Z</published>
    <updated>2022-12-27T18:01:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>折腾了这么久的博客评论系统，可算是能告一段落了。😈</p><h2 id="为什么最终选择了Waline？"><a href="#为什么最终选择了Waline？" class="headerlink" title="为什么最终选择了Waline？"></a>为什么最终选择了Waline？</h2><p>之前一直使用的是Gitalk，后来也不知道自己是哪根筋搭错了，觉得不好用又开始折腾了起来。<br>然后先试了试Valine，正当觉得还不错时，就注意到有其它用户发现一个存在于Valine评论插件的漏洞会导致此评论服务暴露所有评论者的 IP地址 (<a href="https://github.com/xCss/Valine/issues/336">xCss&#x2F;Valine#336</a>)。 请在此漏洞修复之前换用其他评论服务。<br>so what ？直接换  <a href="https://waline.js.org/">Waline</a> ！</p><p>看一下Waline官网的一些介绍：</p><blockquote><p>一款从 <a href="https://valine.js.org/">valine</a> 衍生的带后端评论系统。可以将 Waline 等价成 With backend Valine.</p></blockquote><p>特性：快速、真·安全、Markdown 语法支持、轻量易用、免费部署、多种部署部署方式和存储服务支持，每列选择一项多达 84 种部署方式任君选择… （emmm😂）</p><p>反正看着官方吹了一通牛皮，最让我感兴趣的还是那个独立服务端部署。废话不多说，直接开搞整起来！</p><span id="more"></span><h2 id="Waline-配置"><a href="#Waline-配置" class="headerlink" title="Waline 配置"></a>Waline 配置</h2><p>先是看着官网的 <a href="https://waline.js.org/guide/get-started/">快速上手</a> 文档完整操作流程走了一遍。LeanCloud注册、创建应用、 Vercel 部署项目创建+环境变量设置、….等等一顿操作猛如虎。最后终于走完了流程，兴奋的去点击部署项目的 Visit 按钮去预览 –</p><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/202212291303093.png"></p><p>自己测试了两条评论之后：哎呦~不错呦。<br>然后赶紧按照接入流程去配置自己的博客项目，正当我自满时又注意到了第一条测试评论的位置信息 – 东京都😓<br>好家伙，我还翻着墙呢。 因为我创建的是国际版，免费部署服务器和域名都是国外的（毕竟国内大环境，懂都都懂）。<br>接着我便从墙上下来试了一通，虽然页面还是能正常打开，但是提交评论功能还是挂了。（靓仔此时非常不悦😯）</p><p>去网搜了一下答案，大概意思就是vercel.app域名在国内遭到污染无法访问。<br>随后找到了两种解决办法：</p><ol><li>如果你有申请过自己独立的博客域名，可以在博客顶级域名上添加一个二级子域名作为评论系统的使用域名。然后别忘了添加一条DNS解析记录：CNAME 类型解析指向 cname.vercel-dns.com 这个地址。 之后再去vercel部署服务上，点击settings，找到Domians将vercel上的waline地址指向你设置的子域名上。这样就完成了，后面配置博客的时候serverURL属性配置刚刚的子域名就好了。</li><li>使用其它的部署服务器代替vercel部署。也是我现在采用的方式。虽然我已有独立域名+备案，但就是想尝尝鲜😋</li></ol><h2 id="使用Deta服务端部署"><a href="#使用Deta服务端部署" class="headerlink" title="使用Deta服务端部署"></a>使用Deta服务端部署</h2><p><a href="https://www.deta.sh/">DETA官网</a> ：<a href="https://www.deta.sh/">https://www.deta.sh/</a></p><ol><li>进入官网后还是老套路先注册，然后页面会自动引导你去创建一个默认的部署项目project</li><li>直接点这个链接进入： <a href="https://web.deta.sh/deploy?path=https://github.com/walinejs/deta-starter">https://web.deta.sh/deploy?path=https://github.com/walinejs/deta-starter</a> 将Waline快速部署到deta平台</li><li>deta平台部署完成以后也会自动生成一个随机域名链接。将这个链接配置到博客项目中serverURL属性就可以正常评论了。</li></ol><p>参考文档：<a href="https://waline.js.org/guide/deploy/deta.html">https://waline.js.org/guide/deploy/deta.html</a></p><p>！~~ end</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;折腾了这么久的博客评论系统，可算是能告一段落了。😈&lt;/p&gt;
&lt;h2 id=&quot;为什么最终选择了Waline？&quot;&gt;&lt;a href=&quot;#为什么最终选择了Waline？&quot; class=&quot;headerlink&quot; title=&quot;为什么最终选择了Waline？&quot;&gt;&lt;/a&gt;为什么最终选择了Waline？&lt;/h2&gt;&lt;p&gt;之前一直使用的是Gitalk，后来也不知道自己是哪根筋搭错了，觉得不好用又开始折腾了起来。&lt;br&gt;然后先试了试Valine，正当觉得还不错时，就注意到有其它用户发现一个存在于Valine评论插件的漏洞会导致此评论服务暴露所有评论者的 IP地址 (&lt;a href=&quot;https://github.com/xCss/Valine/issues/336&quot;&gt;xCss&amp;#x2F;Valine#336&lt;/a&gt;)。 请在此漏洞修复之前换用其他评论服务。&lt;br&gt;so what ？直接换  &lt;a href=&quot;https://waline.js.org/&quot;&gt;Waline&lt;/a&gt; ！&lt;/p&gt;
&lt;p&gt;看一下Waline官网的一些介绍：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;一款从 &lt;a href=&quot;https://valine.js.org/&quot;&gt;valine&lt;/a&gt; 衍生的带后端评论系统。可以将 Waline 等价成 With backend Valine.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;特性：快速、真·安全、Markdown 语法支持、轻量易用、免费部署、多种部署部署方式和存储服务支持，每列选择一项多达 84 种部署方式任君选择… （emmm😂）&lt;/p&gt;
&lt;p&gt;反正看着官方吹了一通牛皮，最让我感兴趣的还是那个独立服务端部署。废话不多说，直接开搞整起来！&lt;/p&gt;</summary>
    
    
    
    <category term="博客" scheme="https://zhangone.site/categories/%E5%8D%9A%E5%AE%A2/"/>
    
    
    <category term="博客搭建" scheme="https://zhangone.site/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>开箱：索蔡定焦 55mm F1.8</title>
    <link href="https://zhangone.site/posts/77b658d2/"/>
    <id>https://zhangone.site/posts/77b658d2/</id>
    <published>2022-11-23T18:28:34.000Z</published>
    <updated>2022-11-25T01:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>心心念念的定焦头终于到货了~ 这是入坑摄影以来的第二颗镜头。</p><span id="more"></span><p><img src="https://cdn.zhangone.site/PhotoBed/img/picture/202212052125377.jpg"></p><br /><h2 id="简单介绍一下这颗镜头"><a href="#简单介绍一下这颗镜头" class="headerlink" title="简单介绍一下这颗镜头"></a>简单介绍一下这颗镜头</h2><p><img src="https://cdn.zhangone.site/PhotoBed/img/photography/202212051949764.png" alt="SEL55F18Z"></p><ul><li>焦距：定焦头，全画幅下55毫米。  APS-C画幅下的35mm规格换算焦距为：82.5毫米</li><li>光圈：最大F1.8 ， 最小F22</li><li>重量：281克 (nice 😄，跟我的A7C很搭)</li><li>尺寸：64.4 x 70.5（体积很nice！适马大炮警告⚠️哈哈 ）</li><li>滤光镜直径：49毫米 （赞）</li><li>最近对焦距离约：50厘米 （就是距离半米之内对不上焦。差评😈）</li><li>…. （other）</li></ul><p> Sonnar T* FE 55mm F1.8 ZA 定焦镜头。上市时间是2013年10月份，距离现在已经过去9年了。（WTH ? 四九入国军了！！）<br>虽说数码、电子类产品一向秉承买新不买旧，但这颗镜头从上市以来至今饱受好评，有太多人使用它拍出来很多非常棒的作品。更有人称之为’入门必备镜头’。算是一个经典头了。</p><p><strong>个人认为的一些优点</strong>：<br>色彩不错，照片与视频表现都很好<br>原厂镜头，蔡司镀膜。对焦速度快体验好。（毕竟亲儿子）<br>外观好看。体积小，重量轻，直筒规整形状较为符合个人审美。蔡司小蓝标信仰加成！（颜值即正义😋）<br>搭配我的A7C小机身比较合适。轻便会更有带出去的意愿。<br>…..</p><p><strong>当然也有一些缺点</strong>:</p><ol><li>最近对焦距离50厘米有点无奈…</li><li>有个外号，江湖人称 ‘紫霞仙子’ 。自己实测某些光线场景下确实会有较为明显的紫边。（不过对于我这种非专业人士来说，那都不是事~）</li><li>有点小贵emmm （九年老头了！价格真坚挺）</li></ol><br /><h2 id="镜头实物照片"><a href="#镜头实物照片" class="headerlink" title="镜头实物照片"></a>镜头实物照片</h2><p><img src="https://cdn.zhangone.site/PhotoBed/img/picture/202212052146371.jpg" alt="侧边"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/picture/202212052147759.jpg" alt="上面"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/picture/202212052149959.jpg" alt="前面"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/picture/202212052150084.jpg" alt="镜头"></p><p>我的手机拍摄素质太渣了….<br>镜头其实很好看。</p><br /><h2 id="外出实拍照片"><a href="#外出实拍照片" class="headerlink" title="外出实拍照片"></a>外出实拍照片</h2><p><img src="https://cdn.zhangone.site/PhotoBed/img/photography/202212052236257.png"></p><p>出去扫街咯~！！<br><img src="https://cdn.zhangone.site/PhotoBed/img/photography/202212052217426.jpeg" alt="广告"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/picture/202212052214757.jpeg" alt="灯光"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/photography/202212052218071.jpeg" alt="花"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/photography/202212052218591.jpeg" alt="花草"></p><p>。。。。。。呃</p><p><img src="https://cdn.zhangone.site/PhotoBed/img/photography/202212052239100.jpeg" alt="拍的啥玩意啊"></p><p>嗯emmm…… 好像拍的挺一般的呃。 还没有一些主打拍摄的手机成片好看呢Oh。</p><p>开启狡辩模式：一定是直出的原因！没后期！场景不行！没有三脚架的原因！今天天气不好！冻手太抖了！路人不配合😓！ …………  （🐶不承认自己拍摄技术菜🐶）</p><br /><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>晚上顶着很冷的气温，顶着社恐心理去扫街拍了几十张，回到家发现竟没一张自己满意的照片。但我也没有很失落吧，因为我的拍摄经历一直都是这样😂 哈哈哈</p><p>自从有了相机后才发现摄影并不是自己想象的那么简单，有很多的参数知识，构图审美，后期调色等知识需要去学习。<br>不是按一下快门就能出好看的照片，也讲究天时地利人和。尤其是扫街这种人文摄影，随机性很多。一些美好的画面往往只有一瞬间，没能及时抓拍到就很难再有机会了（像极了人生机遇。 ?怎么突然正经🙅🏻‍♀️？）</p><p>一直觉得 <strong>“愈挫愈勇”</strong> 这句成语更能体现出什么是纯粹的 <strong>热爱</strong><br><strong>摄影是一种利用光的艺术，保持热爱</strong></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;心心念念的定焦头终于到货了~ 这是入坑摄影以来的第二颗镜头。&lt;/p&gt;</summary>
    
    
    
    <category term="摄影" scheme="https://zhangone.site/categories/%E6%91%84%E5%BD%B1/"/>
    
    
    <category term="镜头" scheme="https://zhangone.site/tags/%E9%95%9C%E5%A4%B4/"/>
    
  </entry>
  
  <entry>
    <title>CodeMirror - 使用</title>
    <link href="https://zhangone.site/posts/3f01d2c5/"/>
    <id>https://zhangone.site/posts/3f01d2c5/</id>
    <published>2021-12-01T13:27:42.000Z</published>
    <updated>2021-12-28T12:09:55.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CodeMirror"><a href="#CodeMirror" class="headerlink" title="CodeMirror"></a>CodeMirror</h2><h3 id="简单介绍"><a href="#简单介绍" class="headerlink" title="简单介绍"></a>简单介绍</h3><p>CodeMirror 是一个用 JavaScript 为浏览器实现的多功能文本编辑器。它专门用于编辑代码，并带有 100 多种语言模式和各种实现更高级编辑功能的插件。每种语言都带有功能齐全的代码和语法突出显示，以帮助阅读和编辑复杂的代码。</p><p>支持切换主题、语法高亮、代码折叠。</p><p>多种已有的语言模式开箱即用。（可自己编写新的语言模式）</p><p>……</p><span id="more"></span><h3 id="简单使用"><a href="#简单使用" class="headerlink" title="简单使用"></a>简单使用</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;IE=edge&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span> /&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">title</span>&gt;</span>CodeMirror<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 核心样式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">            <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">href</span>=<span class="string">&quot;../../../node_modules/codemirror/lib/codemirror.css&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 主题样式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">link</span></span></span><br><span class="line"><span class="tag">            <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span></span></span><br><span class="line"><span class="tag">            <span class="attr">href</span>=<span class="string">&quot;../../../node_modules//codemirror/theme/ambiance.css&quot;</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 核心脚本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../node_modules/codemirror/lib/codemirror.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- 语言模式脚本 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;../../../node_modules/codemirror/mode/javascript/javascript.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- &lt;script src=&quot;../../../node_modules/codemirror/mode/clike/clike.js&quot;&gt;&lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layout&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- &lt;textarea name=&quot;&quot; id=&quot;myTextArea&quot; cols=&quot;30&quot; rows=&quot;10&quot;&gt;function myScript()&#123;return 100;&#125;&lt;/textarea&gt; --&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> container = <span class="variable language_">document</span>.<span class="property">body</span>;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> editorConfig = &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 编辑器的起始值</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">value</span>: <span class="string">&#x27;function myScript()&#123;return 100;&#125;\n&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 编辑语言</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">mode</span>: <span class="string">&#x27;javascript&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// mode: &#x27;text/x-java&#x27;, // x-: csrc c++src java</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 主题</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">theme</span>: <span class="string">&#x27;ambiance&#x27;</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// tab缩进宽度</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">tabSize</span>: <span class="number">2</span>,</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 显示行数</span></span></span><br><span class="line"><span class="language-javascript">                <span class="attr">lineNumbers</span>: <span class="literal">true</span>,</span></span><br><span class="line"><span class="language-javascript">            &#125;;</span></span><br><span class="line"><span class="language-javascript">            <span class="keyword">var</span> myCodeMirror = <span class="title class_">CodeMirror</span>(container, editorConfig);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="variable language_">console</span>.<span class="title function_">log</span>(myCodeMirror.<span class="title function_">getValue</span>(), <span class="string">&#x27;获取value&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 设置value</span></span></span><br><span class="line"><span class="language-javascript">                myCodeMirror.<span class="title function_">setValue</span>(<span class="string">&#x27;var message = &quot;hello world&quot;&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;, <span class="number">1000</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">/**</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * <span class="doctag">@param</span> instance: CodeMirror实例</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             * <span class="doctag">@param</span> changeObj: 是一个&#123;from, to, text, removed, origin&#125;有关所发生作为第二个参数的变化包含对象的信息。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             *                   from 和 to 是更改开始和结束的位置（在更改前的坐标系中）例如，&#123;ch:0, line:18&#125;。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             *                   text 是一个字符串数组，表示替换更改范围的文本（按行拆分）。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             *                   removed 是被更改之前的内容，它被此更改覆盖。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             *                   此事件在操作结束之前、DOM 更新发生之前触发。</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">             */</span></span></span><br><span class="line"><span class="language-javascript">            myCodeMirror.<span class="title function_">on</span>(<span class="string">&#x27;change&#x27;</span>, <span class="keyword">function</span> (<span class="params">instance, changeObj</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(changeObj, <span class="string">&#x27;changeObj&#x27;</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;);</span></span><br><span class="line"><span class="language-javascript">        </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!-- &lt;script&gt;</span></span><br><span class="line"><span class="comment">            // 接受一个 textarea DOM 节点作为第一个参数，一个可选的配置对象作为第二个参数。</span></span><br><span class="line"><span class="comment">            // 它将用 CodeMirror 实例替换 textarea，并连接该 textarea 的表单（如果有）以确保在提交表单时将编辑器内容放入 textarea。</span></span><br><span class="line"><span class="comment">            // textarea 中的文本将为编辑器提供内容。</span></span><br><span class="line"><span class="comment">            var myTextArea = document.getElementById(&#x27;myTextArea&#x27;);</span></span><br><span class="line"><span class="comment">            var editorConfig = &#123;</span></span><br><span class="line"><span class="comment">                // 编辑语言</span></span><br><span class="line"><span class="comment">                mode: &#x27;javascript&#x27;,</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">                // 主题</span></span><br><span class="line"><span class="comment">                theme: &#x27;ambiance&#x27;,</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">                // tab缩进宽度</span></span><br><span class="line"><span class="comment">                tabSize: 2,</span></span><br><span class="line"><span class="comment">                </span></span><br><span class="line"><span class="comment">                // 显示行数</span></span><br><span class="line"><span class="comment">                lineNumbers: true,</span></span><br><span class="line"><span class="comment">            &#125;;</span></span><br><span class="line"><span class="comment">            var myCodeMirror = CodeMirror.fromTextArea(myTextArea, editorConfig);</span></span><br><span class="line"><span class="comment">        &lt;/script&gt; --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="React-CodeMirror2"><a href="#React-CodeMirror2" class="headerlink" title="React-CodeMirror2"></a>React-CodeMirror2</h2><p><strong>Github</strong>: <a href="https://github.com/scniro/react-codemirror2">https://github.com/scniro/react-codemirror2</a></p><p><strong>Npm</strong>: <a href="https://www.npmjs.com/package/react-codemirror2">https://www.npmjs.com/package/react-codemirror2</a></p><p><strong>基于codemirror</strong>二次封装，集成为<strong>react</strong>中的一个插件，在<strong>react</strong>中使用</p><p><strong>安装</strong></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install react-codemirror2 codemirror --save</span><br></pre></td></tr></table></figure><p><strong>使用</strong></p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * CodeMirror React版 -- https://github.com/scniro/react-codemirror2    https://www.npmjs.com/package/react-codemirror2</span></span><br><span class="line"><span class="comment"> * 受控   Controlled</span></span><br><span class="line"><span class="comment"> * 不受控 UnControlled</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="title class_">React</span>, &#123; useCallback, useEffect, useRef, useMemo, memo &#125; <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="title class_">PropTypes</span> <span class="keyword">from</span> <span class="string">&#x27;prop-types&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; <span class="title class_">Controlled</span> <span class="keyword">as</span> <span class="title class_">CodeMirror</span> &#125; <span class="keyword">from</span> <span class="string">&#x27;react-codemirror2&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/lib/codemirror.css&#x27;</span>; <span class="comment">// 编辑器核心样式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/lib/codemirror.js&#x27;</span>; <span class="comment">// 编辑器核心js</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 代码折行</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/fold/foldgutter.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/fold/foldcode.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/fold/foldgutter.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/fold/brace-fold.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/fold/comment-fold.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 全屏开启</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/display/fullscreen.css&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/display/fullscreen.js&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 光标所处行高亮</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/addon/selection/active-line&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 语言模式</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/mode/sql/sql.js&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;codemirror/mode/clike/clike.js&#x27;</span>; <span class="comment">// 类C （c \ c++ \ java \ ...）</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&#x27;./index.scss&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 暂支持三种语言</span></span><br><span class="line"><span class="keyword">const</span> supportLanguage = [<span class="string">&#x27;sql&#x27;</span>, <span class="string">&#x27;mysql&#x27;</span>, <span class="string">&#x27;java&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>:</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; 目前暂支持 sql java</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">CodeEditor</span> = (<span class="params">&#123;</span></span><br><span class="line"><span class="params">    className,</span></span><br><span class="line"><span class="params">    onChange,</span></span><br><span class="line"><span class="params">    value,</span></span><br><span class="line"><span class="params">    width,</span></span><br><span class="line"><span class="params">    height,</span></span><br><span class="line"><span class="params">    placeholder,</span></span><br><span class="line"><span class="params">    language,</span></span><br><span class="line"><span class="params">    fullScreen,</span></span><br><span class="line"><span class="params">    onExitFullScreen,</span></span><br><span class="line"><span class="params">&#125;</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">const</span> editorContainerRef = <span class="title function_">useRef</span>(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 退出全屏</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@default</span> Esc keyCode === 27</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">KeyboardEvent</span>&#125; <span class="variable">e</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> exitFullScreen = <span class="title function_">useCallback</span>(</span><br><span class="line">        <span class="function">(<span class="params">&#123; keyCode &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (keyCode === <span class="number">27</span>) <span class="title function_">onExitFullScreen</span>();</span><br><span class="line">        &#125;,</span><br><span class="line">        [onExitFullScreen]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="title function_">useEffect</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">const</span> containerElement = editorContainerRef.<span class="property">current</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (fullScreen &amp;&amp; containerElement) &#123;</span><br><span class="line">            containerElement.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, exitFullScreen, <span class="literal">false</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        containerElement.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, exitFullScreen);</span><br><span class="line">    &#125;, [fullScreen]);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 编辑器初始挂载完毕</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> editorDidMount = <span class="title function_">useCallback</span>(<span class="function"><span class="params">editor</span> =&gt;</span> &#123;</span><br><span class="line">        editor.<span class="title function_">on</span>(<span class="string">&#x27;inputRead&#x27;</span>, <span class="function"><span class="params">cm</span> =&gt;</span> &#123;</span><br><span class="line">            cm.<span class="title function_">execCommand</span>(<span class="string">&#x27;autocomplete&#x27;</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@description</span>: 编辑器输入change事件</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; editor 编辑器所有信息（CodeMirror实例）</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">any</span>&#125; data 当前数据信息</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; value 当前值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">const</span> onInnerChange = <span class="title function_">useCallback</span>(<span class="function">(<span class="params">editor, data, value</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">onChange</span>(value);</span><br><span class="line">    &#125;, []);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> mode = <span class="title function_">useMemo</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (supportLanguage.<span class="title function_">includes</span>(language.<span class="title function_">toLowerCase</span>())) &#123;</span><br><span class="line">            <span class="keyword">return</span> &#123;</span><br><span class="line">                <span class="attr">name</span>: <span class="string">`text/x-<span class="subst">$&#123;language&#125;</span>`</span>,</span><br><span class="line">            &#125;;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            <span class="attr">name</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;, [language]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> editorConfig = <span class="title function_">useMemo</span>(</span><br><span class="line">        <span class="function">() =&gt;</span> (&#123;</span><br><span class="line">            <span class="comment">// 语言模式</span></span><br><span class="line">            mode,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 主题</span></span><br><span class="line">            <span class="attr">theme</span>: <span class="string">&#x27;blackboard&#x27;</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 显示行号</span></span><br><span class="line">            <span class="attr">lineNumbers</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自动获取焦点</span></span><br><span class="line">            <span class="attr">autofocus</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 光标所处行代码高亮</span></span><br><span class="line">            <span class="attr">styleActiveLine</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 自动换行</span></span><br><span class="line">            <span class="attr">lineWrapping</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 代码折行</span></span><br><span class="line">            <span class="attr">foldGutter</span>: <span class="literal">true</span>,</span><br><span class="line">            <span class="attr">gutters</span>: [<span class="string">&#x27;CodeMirror-linenumbers&#x27;</span>, <span class="string">&#x27;CodeMirror-foldgutter&#x27;</span>],</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 代码提示补全（按ctrl+空格键即可调出，可自定义配置快捷键</span></span><br><span class="line">            <span class="attr">extraKeys</span>: &#123; <span class="title class_">Ctrl</span>: <span class="string">&#x27;autocomplete&#x27;</span> &#125;,</span><br><span class="line">            <span class="attr">hintOptions</span>: &#123; <span class="attr">completeSingle</span>: <span class="literal">false</span> &#125;,</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 全屏</span></span><br><span class="line">            fullScreen,</span><br><span class="line">        &#125;),</span><br><span class="line">        [mode, fullScreen]</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        <span class="language-xml"><span class="tag">&lt;<span class="name">div</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">style</span>=<span class="string">&#123;&#123;</span> <span class="attr">width</span>, <span class="attr">height</span> &#125;&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">ref</span>=<span class="string">&#123;editorContainerRef&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            <span class="attr">className</span>=<span class="string">&#123;</span>`<span class="attr">code-editor-container</span> $&#123;<span class="attr">className</span> || &#x27;&#x27;&#125;`&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">        &gt;</span></span></span><br><span class="line"><span class="language-xml">            <span class="tag">&lt;<span class="name">CodeMirror</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">options</span>=<span class="string">&#123;editorConfig&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">value</span>=<span class="string">&#123;value</span> ?? <span class="attr">placeholder</span>&#125;</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">onBeforeChange</span>=<span class="string">&#123;onInnerChange&#125;</span> // <span class="attr">这个事件最好加上</span>，<span class="attr">可以是空函数</span>。<span class="attr">否则在一些情况下</span>，<span class="attr">第二次打开就会有未知的问题</span>（<span class="attr">报错</span>）</span></span></span><br><span class="line"><span class="tag"><span class="language-xml">                <span class="attr">editorDidMount</span>=<span class="string">&#123;editorDidMount&#125;</span></span></span></span><br><span class="line"><span class="tag"><span class="language-xml">            /&gt;</span></span></span><br><span class="line"><span class="language-xml">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">    );</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="title class_">CodeEditor</span>.<span class="property">propTypes</span> = &#123;</span><br><span class="line">    <span class="attr">className</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="attr">language</span>: <span class="title class_">PropTypes</span>.<span class="property">string</span>,</span><br><span class="line">    <span class="attr">fullScreen</span>: <span class="title class_">PropTypes</span>.<span class="property">bool</span>,</span><br><span class="line">    <span class="attr">onChange</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">    <span class="attr">onExitFullScreen</span>: <span class="title class_">PropTypes</span>.<span class="property">func</span>.<span class="property">isRequired</span>,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="title class_">CodeEditor</span>.<span class="property">defaultProps</span> = &#123;</span><br><span class="line">    <span class="attr">onChange</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">onExitFullScreen</span>: <span class="function">() =&gt;</span> &#123;&#125;,</span><br><span class="line">    <span class="attr">language</span>: <span class="string">&#x27;java&#x27;</span>,</span><br><span class="line">    <span class="attr">fullScreen</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">className</span>: <span class="string">&#x27;&#x27;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">memo</span>(<span class="title class_">CodeEditor</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/library/image-20211206210053477.png"></p><p>……</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;CodeMirror&quot;&gt;&lt;a href=&quot;#CodeMirror&quot; class=&quot;headerlink&quot; title=&quot;CodeMirror&quot;&gt;&lt;/a&gt;CodeMirror&lt;/h2&gt;&lt;h3 id=&quot;简单介绍&quot;&gt;&lt;a href=&quot;#简单介绍&quot; class=&quot;headerlink&quot; title=&quot;简单介绍&quot;&gt;&lt;/a&gt;简单介绍&lt;/h3&gt;&lt;p&gt;CodeMirror 是一个用 JavaScript 为浏览器实现的多功能文本编辑器。它专门用于编辑代码，并带有 100 多种语言模式和各种实现更高级编辑功能的插件。每种语言都带有功能齐全的代码和语法突出显示，以帮助阅读和编辑复杂的代码。&lt;/p&gt;
&lt;p&gt;支持切换主题、语法高亮、代码折叠。&lt;/p&gt;
&lt;p&gt;多种已有的语言模式开箱即用。（可自己编写新的语言模式）&lt;/p&gt;
&lt;p&gt;……&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="library" scheme="https://zhangone.site/tags/library/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript - 模块的循环加载</title>
    <link href="https://zhangone.site/posts/41c7d5fc/"/>
    <id>https://zhangone.site/posts/41c7d5fc/</id>
    <published>2021-08-31T07:27:42.000Z</published>
    <updated>2022-03-12T12:17:42.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、什么是循环加载"><a href="#一、什么是循环加载" class="headerlink" title="一、什么是循环加载?"></a>一、什么是<strong>循环加载</strong>?</h2><p><img src="https://cdn.zhangone.site/PhotoBed/img/social/bg2015110201.jpg"></p><p><strong>“循环加载”（circular dependency）</strong> 指的是：如<code>a</code>脚本执行中依赖(导入)了<code>b</code>脚本，而<code>b</code>脚本执行中又依赖了<code>a</code>脚本</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">const</span> b = <span class="built_in">require</span>(<span class="string">&#x27;b&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">const</span> a = <span class="built_in">require</span>(<span class="string">&#x27;a&#x27;</span>);</span><br></pre></td></tr></table></figure><blockquote><p>一般情况下，<strong>循环加载</strong> 表示存在 <strong>强耦合</strong> ，如果处理不好，可能会导致递归引用无限加载，导致程序无法正常继续运行。</p></blockquote><span id="more"></span><h2 id="二、CommonJS-加载规范"><a href="#二、CommonJS-加载规范" class="headerlink" title="二、CommonJS 加载规范"></a>二、CommonJS 加载规范</h2><h3 id="1-CommonJS模块的加载原理"><a href="#1-CommonJS模块的加载原理" class="headerlink" title="1. CommonJS模块的加载原理"></a>1. CommonJS模块的加载原理</h3><p>CommonJS的一个模块，就是一个脚本文件。<code>require</code>命令第一次加载该脚本，就会执行整个脚本，然后在内存生成一个对象。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">id</span>: <span class="string">&#x27;...&#x27;</span>,    <span class="comment">// 模块名</span></span><br><span class="line">  <span class="attr">exports</span>: &#123; ... &#125;,<span class="comment">// 模块输出的各个接口(即导出的属性)</span></span><br><span class="line">  <span class="attr">loaded</span>: <span class="literal">true</span>,<span class="comment">// 布尔值，表示该模块的脚本是否执行完毕</span></span><br><span class="line">  ... <span class="comment">// 更多属性...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当 <code>loaded</code> 为true时，则表示此模块已加载完成，进入模块缓存区。以后需要用到这个模块的时候，就会到<code>exports</code>属性上面取值。即使再次执行<code>require</code>命令，也不会再次执行该模块，而是到缓存之中取值。</p><p><strong>CommonJS 输出值的拷贝</strong></p><p>CommonJS 模块输出的是值的拷贝(原始值的拷贝)，也就是说，一旦输出一个值，模块内部的变化就影响不到这个值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">foo</span>);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="property">foo</span>);</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>).<span class="property">foo</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    foo = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">foo</span>: foo,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行 a.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node a.js</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">1</span></span><br></pre></td></tr></table></figure><p>上面代码说明，b 模块加载以后，它的内部 <code>foo</code> 变化就影响不到输出的 <code>exports.foo</code> 了。这是因为 <code>foo</code> 是一个原始类型的值，会被缓存。所以如果想要在 CommonJS 中动态获取模块中的值，那么就需要借助于函数延时执行的特性。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">var</span> b = <span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">foo</span>());</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(b.<span class="title function_">foo</span>());</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="built_in">require</span>(<span class="string">&#x27;./b&#x27;</span>).<span class="title function_">foo</span>());</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    foo = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br><span class="line"><span class="variable language_">module</span>.<span class="property">exports</span> = &#123;</span><br><span class="line">    <span class="attr">foo</span>: <span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> foo;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>执行 a.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node a.js</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">2</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">2</span></span><br></pre></td></tr></table></figure><p>总结一下：</p><ol><li>CommonJS 被重复引入的模块不会重复执行，会直接获取到该模块暴露出的 <code>module.exports</code> 对象</li><li>如果要实时获取模块中的最新值，则需要用其他的方式去更新 <code>module.exports</code> 上的值</li><li>如果 <code>module.exports</code> 暴露出的属性都是 <strong>引用类型</strong> 的值。那么就不存在这个问题了</li></ol><h3 id="2-CommonJS模块的循环加载"><a href="#2-CommonJS模块的循环加载" class="headerlink" title="2. CommonJS模块的循环加载"></a>2. CommonJS模块的循环加载</h3><p>CommonJS的重要特性是边执行代码，边加载(同步)<code>require</code>导入模块。即脚本代码在<code>require</code>的时候，就会全部执行。<strong>CommonJS的做法是，一旦出现某个模块被”循环加载”，就只输出已经执行的部分，还未执行的部分不会输出。</strong></p><p>详细可查看 <a href="https://nodejs.org/api/modules.html#modules_cycles">官方文档</a> 里面的例子。</p><p>下面将参照文档中的例子，试一试。</p><p>脚本文件<code>a.js</code>代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="keyword">const</span> B = <span class="built_in">require</span>(<span class="string">&#x27;./b.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在a.js中输出 b.js 导出的 done值为：&#x27;</span>, B.<span class="property">done</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done2</span> = <span class="string">&#x27;done2&#x27;</span>;</span><br></pre></td></tr></table></figure><p>脚本文件<code>b.js</code>代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在b.js中输出 a.js导出的 done值为：&#x27;</span>, A.<span class="property">done</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;在b.js中输出 a.js导出的 done2值为：&#x27;</span>, A.<span class="property">done2</span>);</span><br></pre></td></tr></table></figure><p>执行 <code>a.js</code> :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node a.js</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">在b.js中输出 a.js导出的 <span class="keyword">done</span>值为： <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">在b.js中输出 a.js导出的 done2值为： undefined</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">在a.js中输出 b.js 导出的 <span class="keyword">done</span>值为： <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p>可以看到，在<code>a</code>脚本中执行到第二行立即就去加载执行了<code>b</code>脚本。在<code>b</code>脚本中又去读取了<code>a</code>脚本，但此时<code>a</code>脚本只执行到了第二行。所以<code>b</code>脚本中就只能导入<code>a</code>脚本已执行的部分。故此输出A模块的<strong>done</strong>值为<strong>false</strong>，而<strong>done2</strong>是<strong>undefined</strong>。 当<code>b</code>脚本执行完毕以后，<code>a</code>脚本才继续往下执行。</p><p>接着写一个脚本<code>main.js</code>，验证这个过程。</p><p>脚本文件<code>main.js</code>代码如下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> A = <span class="built_in">require</span>(<span class="string">&#x27;./a.js&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> B = <span class="built_in">require</span>(<span class="string">&#x27;./b.js&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A.done:&#x27;</span>, A.<span class="property">done</span>);      </span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;A.done2:&#x27;</span>, A.<span class="property">done2</span>);       </span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;B.done:&#x27;</span>, B.<span class="property">done</span>);</span><br></pre></td></tr></table></figure><p>执行 <code>main.js</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">node main.js</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">在b.js中输出 a.js导出的 <span class="keyword">done</span>值为： <span class="literal">false</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">在b.js中输出 a.js导出的 done2值为： undefined</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">在a.js中输出 b.js 导出的 <span class="keyword">done</span>值为： <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">A.<span class="keyword">done</span>: <span class="literal">true</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">A.done2: done2</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">B.<span class="keyword">done</span>: <span class="literal">true</span></span></span><br></pre></td></tr></table></figure><p>上面的代码证明了两件事:</p><ul><li><p>在<code>b.js</code>之中，<code>a.js</code>没有执行完毕，只执行了部分。</p></li><li><p><code>main.js</code>执行到第二行时，不会再次执行<code>b.js</code>，而是输出缓存的<code>b.js</code>的执行结果。即：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">exports</span>.<span class="property">done</span> = <span class="literal">true</span>;</span><br></pre></td></tr></table></figure></li></ul><h2 id="三、ES6模块的循环加载"><a href="#三、ES6模块的循环加载" class="headerlink" title="三、ES6模块的循环加载"></a>三、ES6模块的循环加载</h2><h3 id="1-babel-node"><a href="#1-babel-node" class="headerlink" title="1. babel-node"></a>1. babel-node</h3><p>提供一个自己在本地调试 js 代码时常使用的方式：使用 <strong>babel-node</strong> 命令，来运行含有 <code>import/export</code> 语法的 js 代码。</p><blockquote><p>注意：babel-node 不能用于生产环境！因为 babel-node 会加载更多资源和模块，使得运行环境变「重」。</p></blockquote><p>babel @7.x ~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i -g @babel/core @babel/node</span></span><br></pre></td></tr></table></figure><p>项目根目录中下执行：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i @babel/preset-env –save-dev</span></span><br></pre></td></tr></table></figure><p><strong>.babelrc</strong> 文件配置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;presets&quot;</span>: [<span class="string">&quot;@babel/preset-env&quot;</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-ES6模块的加载机制"><a href="#2-ES6模块的加载机制" class="headerlink" title="2. ES6模块的加载机制"></a>2. ES6模块的加载机制</h3><p>ES6 模块跟 CommonJS 模块的不同，主要有以下两个方面：</p><ol><li>ES6 模块输出的是值得引用，输出接口动态绑定。而 CommonJS 输出的则是值得拷贝</li><li>ES6 模块编译时执行，而 CommonJS 模块总是在运行时执行加载</li></ol><p>ES6模块机制：在遇到模块加载命令<code>import</code>时，不会去执行模块，而是只生成一个引用。等到真的需要用到时，再到模块里面去取值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">    <span class="keyword">import</span>(<span class="string">&#x27;./b&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">&#123; foo &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(foo);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    foo = <span class="number">2</span>;</span><br><span class="line">&#125;, <span class="number">500</span>);</span><br></pre></td></tr></table></figure><p>执行命令：babel-node a.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">babel-node a.js</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">1</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">2</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">2</span></span><br></pre></td></tr></table></figure><p>可以假想为 ES6模块机制把 “整个模块当作了一个引用闭包”</p><p><strong>ES6 静态编译</strong></p><ol><li><code>import</code> 命令会被 JavaScript 引擎静态分析，优先于模块内的其他内容执行。</li><li><code>export</code> 命令会有变量声明提前的效果。</li></ol><p>关于 <code>export</code> 变量声明提升:</p><p>正常的引入模块是没办法看出变量声明提升的特性，需要通过循环依赖加载才能看出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="keyword">import</span> &#123; foo &#125; <span class="keyword">from</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a.js&#x27;</span>);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">bar2</span> = (<span class="params"></span>) =&gt; &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar2&#x27;</span>);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">bar3</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;bar3&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">let</span> foo = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> a <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">babel-node a.js</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">&#123; bar3: [Function: bar3], bar: undefined, bar2: undefined &#125;</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">a.js</span></span><br></pre></td></tr></table></figure><p><code>export</code> 导出提升类似于 <code>es5</code> 机制中的变量提升机制。</p><p>由<code>function</code>声明的函数会在提升命名的同时一并赋值 (es5机制)</p><h3 id="3-ES6-模块循环依赖"><a href="#3-ES6-模块循环依赖" class="headerlink" title="3. ES6 模块循环依赖"></a>3. <strong>ES6 模块循环依赖</strong></h3><p>跟 CommonJS 模块一样，ES6 不会再去执行重复加载的模块，又由于 ES6 动态输出绑定的特性，能保证 ES6 在任何时候都能获取其它模块当前的最新值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// a.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a starting&#x27;</span>)</span><br><span class="line"><span class="keyword">import</span> &#123;foo&#125; <span class="keyword">from</span> <span class="string">&#x27;./b&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in b, foo:&#x27;</span>, foo);</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> bar = <span class="number">2</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;a done&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// b.js</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b starting&#x27;</span>);</span><br><span class="line"><span class="keyword">import</span> &#123;bar&#125; <span class="keyword">from</span> <span class="string">&#x27;./a&#x27;</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> foo = <span class="string">&#x27;foo&#x27;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in a, bar:&#x27;</span>, bar);</span><br><span class="line"><span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;in a, setTimeout bar:&#x27;</span>, bar);</span><br><span class="line">&#125;)</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;b done&#x27;</span>);</span><br></pre></td></tr></table></figure><p>执行 a.js</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">babel-node a.js</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="keyword">in</span> a, bar: undefined</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">b <span class="keyword">done</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">a starting</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="keyword">in</span> b, foo: foo</span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash">a <span class="keyword">done</span></span></span><br><span class="line"><span class="meta prompt_">&gt; </span><span class="language-bash"><span class="keyword">in</span> a, setTimeout bar: 2</span></span><br></pre></td></tr></table></figure><p>ES6模块不会缓存运行结果，而是动态地去被加载的模块取值，以及变量总是绑定其所在的模块。</p><p>这导致ES6处理”循环加载”与CommonJS有本质的不同。<strong>ES6根本不会关心是否发生了”循环加载”，只是生成一个指向被加载模块的引用，需要开发者自己保证，真正取值的时候能够取到值。</strong></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/social/image-20210518202854464.png"></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;一、什么是循环加载&quot;&gt;&lt;a href=&quot;#一、什么是循环加载&quot; class=&quot;headerlink&quot; title=&quot;一、什么是循环加载?&quot;&gt;&lt;/a&gt;一、什么是&lt;strong&gt;循环加载&lt;/strong&gt;?&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;https://cdn.zhangone.site/PhotoBed/img/social/bg2015110201.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;“循环加载”（circular dependency）&lt;/strong&gt; 指的是：如&lt;code&gt;a&lt;/code&gt;脚本执行中依赖(导入)了&lt;code&gt;b&lt;/code&gt;脚本，而&lt;code&gt;b&lt;/code&gt;脚本执行中又依赖了&lt;code&gt;a&lt;/code&gt;脚本&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// a.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; b = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;b&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// b.js&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; a = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&amp;#x27;a&amp;#x27;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;

&lt;blockquote&gt;
&lt;p&gt;一般情况下，&lt;strong&gt;循环加载&lt;/strong&gt; 表示存在 &lt;strong&gt;强耦合&lt;/strong&gt; ，如果处理不好，可能会导致递归引用无限加载，导致程序无法正常继续运行。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://zhangone.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>react-redux原理实现</title>
    <link href="https://zhangone.site/posts/2f1230a5/"/>
    <id>https://zhangone.site/posts/2f1230a5/</id>
    <published>2020-09-11T17:30:14.000Z</published>
    <updated>2020-09-11T17:30:14.000Z</updated>
    
    <content type="html"><![CDATA[<p>先简单了解一下 <code>react-redux</code></p><h3 id="一、组件分类"><a href="#一、组件分类" class="headerlink" title="一、组件分类"></a>一、组件分类</h3><p><code>React-Redux</code> 将所有组件分成两大类：<strong>UI 组件</strong>（presentational component）和<strong>容器组件</strong>（container component）。</p><ul><li><h4 id="UI-组件："><a href="#UI-组件：" class="headerlink" title="UI 组件："></a>UI 组件：</h4><ul><li>只负责 <code>UI</code> 的呈现，不带有任何业务逻辑</li><li>没有状态（即不使用<code>this.state</code>这个变量）</li><li>所有数据都由参数（<code>this.props</code>）提供</li><li>不使用任何 <code>Redux</code> 的 <code>API</code></li></ul></li><li><h4 id="容器组件："><a href="#容器组件：" class="headerlink" title="容器组件："></a>容器组件：</h4><ul><li>负责管理数据和业务逻辑，不负责 <code>UI</code> 的呈现</li><li>带有内部状态，可以将状态通过<code>props</code>给子组件</li><li>使用 <code>Redux</code> 的 <code>API</code></li></ul></li></ul><p>React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，我们只写UI组件，而顶层容器是通过调用一个方法来生成的</p><span id="more"></span><h3 id="二、connect-方法"><a href="#二、connect-方法" class="headerlink" title="二、connect()方法"></a>二、<code>connect()</code>方法</h3><p><code>React-Redux</code> 提供了<code>connect</code>方法，用于将 <code>UI</code> 组件包装成容器组件。<br>容器是要有状态有业务逻辑的，因此在<code>connect</code>方法生成顶层容器时，我们就应该把所需要的状态和业务逻辑定义好并提供给<code>connect</code>。<br>因此，<code>connect</code>方法的完整 <code>API</code> 如下</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">import &#123; connect &#125; from &#x27;react-redux&#x27;</span><br><span class="line"></span><br><span class="line">const VisibleTodoList = connect(</span><br><span class="line">  mapStateToProps,</span><br><span class="line">  mapDispatchToProps</span><br><span class="line">)(component)</span><br></pre></td></tr></table></figure><p>其中，connect方法接受两个参数：mapStateToProps和mapDispatchToProps。它们定义了 UI 组件的业务逻辑。前者负责输入逻辑，即将state映射到 UI 组件的参数（props），后者负责输出逻辑，即将用户对 UI 组件的操作映射成 Action。</p><h3 id="三、-lt-Provider-gt-组件"><a href="#三、-lt-Provider-gt-组件" class="headerlink" title="三、&lt;Provider&gt; 组件"></a>三、<code>&lt;Provider&gt;</code> 组件</h3><p>connect方法生成容器组件时，我们定义了一堆的逻辑和状态，而只有顶层容器能拿到store的时候才有意义，因此需要让容器组件拿到store的state对象。</p><p>React-Redux 提供Provider组件，可以让组件树中的任意一个容器组件拿到state。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; Provider &#125; from &quot;react-redux&quot;;</span><br><span class="line">import store from &quot;./store/store.js&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App&gt;&lt;/App&gt;</span><br><span class="line">&lt;/Provider&gt;, document.querySelector(&quot;#root&quot;));</span><br></pre></td></tr></table></figure><h3 id="四、源码实现"><a href="#四、源码实现" class="headerlink" title="四、源码实现"></a>四、源码实现</h3><p><code>react-redux</code>更多用法不多介绍, 详情参阅官方文档 &gt;  <a href="https://www.redux.org.cn/docs/react-redux/">React Redux文档</a></p><p>上代码：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import PropTypes from &quot;prop-types&quot;;</span><br><span class="line"></span><br><span class="line">// redux :  bindActionCreators</span><br><span class="line">// import &#123; bindActionCreators &#125; from &quot;redux&quot;;  </span><br><span class="line"></span><br><span class="line">// react-redux: 根组件 Provider; </span><br><span class="line">class Provider extends React.Component &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line">    // 利用context上下文实现跨组件传递</span><br><span class="line">    static childContextTypes = &#123;</span><br><span class="line">        store: PropTypes.object</span><br><span class="line">    &#125;</span><br><span class="line">    getChildContext() &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">            store: this.props.store</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">        // 返回Provider组件标签之内的子组件进行渲染</span><br><span class="line">        return &lt;&gt;</span><br><span class="line">            &#123;this.props.children&#125;</span><br><span class="line">        &lt;/&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// connect : 高阶函数，生成组件</span><br><span class="line">const connect = (mapStateToProps, mapDispatchToProps) =&gt; (Component) =&gt; &#123;</span><br><span class="line">    return class Connect extends React.Component &#123;</span><br><span class="line">        constructor(props, context) &#123;</span><br><span class="line">            super();</span><br><span class="line"></span><br><span class="line">            // 将store中的总state传入mapStateToProps,其返回部分的state数据或者自定义、全部的state</span><br><span class="line">            this.state = mapStateToProps(context.store.getState());</span><br><span class="line">        &#125;</span><br><span class="line">        // 接收context属性</span><br><span class="line">        static contextTypes = &#123;</span><br><span class="line">            store: PropTypes.object</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        // 订阅函数，每当执行dispatch就更新视图</span><br><span class="line">        componentDidMount() &#123;</span><br><span class="line">            this.unSubscribe = this.context.store.subscribe(</span><br><span class="line">                () =&gt; this.setState(mapStateToProps(this.context.store.getState()))</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">        // 取消订阅</span><br><span class="line">        componentWillUnmount() &#123;</span><br><span class="line">            this.unSubscribe();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        render() &#123;</span><br><span class="line">            console.log(this);</span><br><span class="line">            // mapDispatchToProps : 除传入函数以外，在react-redux中:connect第二个参数还可以直接传入actions对象。</span><br><span class="line">            // 如果是函数，将store.dispatch传入，执行接收其返回值。</span><br><span class="line">            // 如果是对象，就会调用redux中的api--&gt; bindActionCreators(); 将对象传入，进行dispatch二次包装成函数</span><br><span class="line">            let actions;</span><br><span class="line">            if (typeof mapDispatchToProps === &quot;function&quot;) &#123;</span><br><span class="line">                actions = mapDispatchToProps(this.context.store.dispatch);</span><br><span class="line">            &#125; else if (typeof mapDispatchToProps === &quot;object&quot; &amp;&amp; mapDispatchToProps !== null) &#123;</span><br><span class="line">                // actions = bindActionCreators(mapDispatchToProps, this.context.store.dispatch);  // redux内置</span><br><span class="line"></span><br><span class="line">                // 既然写到这里了，就不用redux内置的bindActionCreators方法了。还是自己封装一个吧</span><br><span class="line">                actions = bindActionCreators(mapDispatchToProps, this.context.store.dispatch);</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                actions = &#123;&#125;;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            // 将指定的数据传入子组件，组件内部可以通过this.props获取</span><br><span class="line">            return &lt;&gt;</span><br><span class="line">                &lt;Component &#123;...this.state&#125; &#123;...actions&#125;&gt;&lt;/Component&gt;</span><br><span class="line">            &lt;/&gt;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 封装丐版 bindActionCreators  </span><br><span class="line">const bindActionCreators = (actionCreators, dispatch) =&gt; &#123;</span><br><span class="line">    const boundActionCreators = &#123;&#125;;</span><br><span class="line">    for (let key in actionCreators) &#123;</span><br><span class="line">        const actionCreator = actionCreators[key];</span><br><span class="line">        if (typeof actionCreator === &quot;function&quot;) &#123;</span><br><span class="line">            boundActionCreators[key] = function (...arg) &#123;</span><br><span class="line">                dispatch(actionCreator.apply(this, arg));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    return boundActionCreators;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export &#123;</span><br><span class="line">    Provider,</span><br><span class="line">    connect</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="五、效果测试"><a href="#五、效果测试" class="headerlink" title="五、效果测试"></a>五、效果测试</h3><ul><li><p>小案列目录结构<br>  <img src="https://cdn.zhangone.site/PhotoBed/img/blog/React-Redux/react-redux.png"></p></li><li><p>index.js :</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line">import ReactDOM from &quot;react-dom&quot;;</span><br><span class="line"></span><br><span class="line">// import &#123; Provider &#125; from &quot;react-redux&quot;;</span><br><span class="line">import &#123; Provider &#125; from &quot;./my-react-redux&quot;;</span><br><span class="line"></span><br><span class="line">import store from &quot;./store/store.js&quot;;</span><br><span class="line">import App from &quot;./App&quot;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ReactDOM.render(&lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;App&gt;&lt;/App&gt;</span><br><span class="line">&lt;/Provider&gt;, document.querySelector(&quot;#root&quot;));</span><br></pre></td></tr></table></figure></li><li><p>app.js :</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">import Parent from &quot;./components/Parent&quot;;</span><br><span class="line">import Child from &quot;./components/Child&quot;;</span><br><span class="line"></span><br><span class="line">export default class App extends React.Component &#123;</span><br><span class="line">    constructor()&#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render()&#123;</span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &lt;Parent&gt;&lt;/Parent&gt;</span><br><span class="line">            &lt;Child&gt;&lt;/Child&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>Parent.jsx :</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">import React from &quot;react&quot;;</span><br><span class="line"></span><br><span class="line">import actions from &quot;../store/actions&quot;;</span><br><span class="line"></span><br><span class="line">import &#123; connect &#125; from &quot;../my-react-redux&quot;;</span><br><span class="line"></span><br><span class="line">class Parent extends React.Component &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        super();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    changeNum = () =&gt; &#123;</span><br><span class="line">        this.props.changeNum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        console.log(this);</span><br><span class="line">        </span><br><span class="line">        return &lt;div&gt;</span><br><span class="line">            &#123;this.props.num&#125;</span><br><span class="line">            &lt;button onClick=&#123;this.changeNum&#125;&gt;更改num&lt;/button&gt;</span><br><span class="line">        &lt;/div&gt;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// export default Parent;</span><br><span class="line">export default connect(state =&gt; (&#123; ...state &#125;), actions)(Parent);</span><br></pre></td></tr></table></figure></li><li><p>其他文件就不发了，直接看效果<br>  <img src="https://cdn.zhangone.site/PhotoBed/img/blog/React-Redux/react-redux-effect-1.png"></p><p>  点击更改num ，让num+1 。 更改age，让age+2<br>  <img src="https://cdn.zhangone.site/PhotoBed/img/blog/React-Redux/react-redux-effect-2.png"></p></li></ul><p>嗝嗝~~ 睡觉</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;先简单了解一下 &lt;code&gt;react-redux&lt;/code&gt;&lt;/p&gt;
&lt;h3 id=&quot;一、组件分类&quot;&gt;&lt;a href=&quot;#一、组件分类&quot; class=&quot;headerlink&quot; title=&quot;一、组件分类&quot;&gt;&lt;/a&gt;一、组件分类&lt;/h3&gt;&lt;p&gt;&lt;code&gt;React-Redux&lt;/code&gt; 将所有组件分成两大类：&lt;strong&gt;UI 组件&lt;/strong&gt;（presentational component）和&lt;strong&gt;容器组件&lt;/strong&gt;（container component）。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h4 id=&quot;UI-组件：&quot;&gt;&lt;a href=&quot;#UI-组件：&quot; class=&quot;headerlink&quot; title=&quot;UI 组件：&quot;&gt;&lt;/a&gt;UI 组件：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;只负责 &lt;code&gt;UI&lt;/code&gt; 的呈现，不带有任何业务逻辑&lt;/li&gt;
&lt;li&gt;没有状态（即不使用&lt;code&gt;this.state&lt;/code&gt;这个变量）&lt;/li&gt;
&lt;li&gt;所有数据都由参数（&lt;code&gt;this.props&lt;/code&gt;）提供&lt;/li&gt;
&lt;li&gt;不使用任何 &lt;code&gt;Redux&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;h4 id=&quot;容器组件：&quot;&gt;&lt;a href=&quot;#容器组件：&quot; class=&quot;headerlink&quot; title=&quot;容器组件：&quot;&gt;&lt;/a&gt;容器组件：&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;负责管理数据和业务逻辑，不负责 &lt;code&gt;UI&lt;/code&gt; 的呈现&lt;/li&gt;
&lt;li&gt;带有内部状态，可以将状态通过&lt;code&gt;props&lt;/code&gt;给子组件&lt;/li&gt;
&lt;li&gt;使用 &lt;code&gt;Redux&lt;/code&gt; 的 &lt;code&gt;API&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;React-Redux 规定，所有的 UI 组件都由用户提供，容器组件则是由 React-Redux 自动生成。也就是说，我们只写UI组件，而顶层容器是通过调用一个方法来生成的&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="redux" scheme="https://zhangone.site/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Proxy</title>
    <link href="https://zhangone.site/posts/adb531e4/"/>
    <id>https://zhangone.site/posts/adb531e4/</id>
    <published>2020-06-02T04:12:18.000Z</published>
    <updated>2020-06-02T04:12:18.000Z</updated>
    
    <content type="html"><![CDATA[<p>在即将到来的<code>Vue3.0</code>中，<code>Vue</code>数据的响应式系统采用了<code>ES6</code>的<code>Proxy</code>来代替<code>Object.defineProperty</code></p><ul><li><code>Object.defineProperty</code> ：兼容主流浏览器和ie9以上的ie浏览器，能够监听数据对象的变化，但是监听不到对象属性的增删、数组元素和长度的变化，同时会在vue初始化的时候把所有的Observer都建立好，才能观察到数据对象属性的变化。</li><li><code>Proxy</code> : 可以做到监听对象属性的增删和数组元素和长度的修改，还可以监听<code>Map</code>、<code>Set</code>、<code>WeakSet</code>、<code>WeakMap</code>，同时还实现了惰性的监听，不会在初始化的时候创建所有的Observer，而是会在用到的时候才去监听。</li></ul><span id="more"></span><h4 id="Proxy语法："><a href="#Proxy语法：" class="headerlink" title="Proxy语法："></a>Proxy语法：</h4><p><strong><code>Proxy</code> 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）。</strong><br><strong>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> p = <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler)</span><br></pre></td></tr></table></figure><ul><li><strong>参数</strong>：</li></ul><ol><li><code>target</code> : 要使用 Proxy 包装的目标对象（可以是任何类型的对象，包括原生数组，函数，甚至另一个代理）。  </li><li><code>handler</code>: 一个通常以函数作为属性的对象，各属性中的函数分别定义了在执行各种操作时代理 <code>p</code> 的行为。</li></ol><ul><li><p><code>Proxy</code> – api:</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Proxy</span>.<span class="title function_">revocable</span>()</span><br><span class="line"><span class="comment">// 创建一个可撤销的Proxy对象。</span></span><br></pre></td></tr></table></figure></li><li><p><code>handler </code>对象的方法<br>  对象是一个容纳一批特定属性的占位符对象。它包含有 Proxy 的各个捕获器（trap）。 所有的捕捉器是可选的。如果没有定义某个捕捉器，那么就会保留源对象的默认行为。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  Proxy 支持的拦截操作一览，一共 13 种。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">get</span>(target, propKey, receiver)： </span><br><span class="line"> <span class="comment">// 拦截对象属性的读取， 比如proxy.foo和proxy[&#x27;foo&#x27;]。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">set</span>(target, propKey, value, receiver)： </span><br><span class="line"> <span class="comment">// 拦截对象属性的设置， 比如proxy.foo = v或proxy[&#x27;foo&#x27;] = v， 返回一个布尔值。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">has</span>(target, propKey)： </span><br><span class="line"> <span class="comment">// 拦截propKey in proxy的操作， 返回一个布尔值。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">deleteProperty</span>(target, propKey)： </span><br><span class="line"> <span class="comment">// 拦截delete proxy[propKey] 的操作， 返回一个布尔值。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">ownKeys</span>(target):</span><br><span class="line"><span class="comment">// 拦截Object.getOwnPropertyNames(proxy)、Object.getOwnPropertySymbols(proxy)、Object.keys(proxy)、for...in循环，返回一个数组。该方法返回目标对象所有自身的属性的属性名，而Object.keys()的返回结果仅包括目标对象自身的可遍历属性。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">getOwnPropertyDescriptor</span>(target, propKey)：</span><br><span class="line"> <span class="comment">// 拦截Object.getOwnPropertyDescriptor(proxy, propKey)，返回属性的描述对象。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">defineProperty</span>(target, propKey, propDesc)：</span><br><span class="line"> <span class="comment">// 拦截Object.defineProperty(proxy, propKey, propDesc）、Object.defineProperties(proxy, propDescs)，返回一个布尔值。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">preventExtensions</span>(target)：</span><br><span class="line"> <span class="comment">// 拦截Object.preventExtensions(proxy)，返回一个布尔值。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">getPrototypeOf</span>(target)：</span><br><span class="line"> <span class="comment">// 拦截Object.getPrototypeOf(proxy)，返回一个对象。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">isExtensible</span>(target)：</span><br><span class="line"> <span class="comment">// 拦截Object.isExtensible(proxy)，返回一个布尔值。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">setPrototypeOf</span>(target, proto)：</span><br><span class="line"> <span class="comment">// 拦截Object.setPrototypeOf(proxy, proto)，返回一个布尔值。如果目标对象是函数，那么还有两种额外操作可以拦截。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">apply</span>(target, object, args)：</span><br><span class="line"> <span class="comment">// 拦截 Proxy 实例作为函数调用的操作，比如proxy(...args)、proxy.call(object, ...args)、proxy.apply(...)。</span></span><br><span class="line"> </span><br><span class="line"> <span class="title function_">construct</span>(target, args)：</span><br><span class="line"><span class="comment">// 拦截 Proxy 实例作为构造函数调用的操作，比如new proxy(...args)。</span></span><br></pre></td></tr></table></figure></li></ul><h4 id="关于-Refect"><a href="#关于-Refect" class="headerlink" title="关于 Refect"></a>关于 <code>Refect</code></h4><ul><li><code>Reflect</code>对象与<code>Proxy</code>对象一样，也是 <code>ES6</code> 为了操作对象而提供的新 <code>API</code></li><li><code>Reflect</code>与<code>Proxy--handler</code>对象的方法是一一对应的;<br> 关于<code>Reflect</code>的详情了解 <a href="https://es6.ruanyifeng.com/#docs/reflect">点击了解ES6 &#x3D;&gt; Reflect</a></li></ul><h4 id="get-与-set"><a href="#get-与-set" class="headerlink" title="get() 与 set()"></a><code>get()</code> 与 <code>set()</code></h4><ul><li><code>get</code>&#x3D;&gt; 方法用于拦截某个属性的读取操作，可以接受三个参数，依次为目标对象、属性名和 <code>proxy</code> 实例本身（严格地说，是操作行为所针对的对象），其中最后一个参数可选。</li><li><code>set</code> &#x3D;&gt; 方法用来拦截某个属性的赋值操作，可以接受四个参数，依次为目标对象、属性名、属性值和 <code>Proxy</code> 实例本身，其中最后一个参数可选。</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// new Proxy(target, handler);</span></span><br><span class="line"><span class="comment">// target ==&gt; 要进行拦截的对象</span></span><br><span class="line"><span class="comment">// handler ==&gt; 要求是一个对象，用于定制拦截的行为，及逻辑处理</span></span><br><span class="line"><span class="comment">// 如果handler是一个空对象，就不会有任何的拦截处理，访问 py 这个实例效果同于访问 target。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">name</span>: <span class="string">&quot;Proxy&quot;</span>,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> py = <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;</span><br><span class="line">   <span class="title function_">get</span>(<span class="params">target, key, example</span>) &#123;</span><br><span class="line">       <span class="comment">// target =&gt; obj:&#123;name:&quot;Proxy&quot;&#125;</span></span><br><span class="line">       <span class="comment">// key =&gt; 每次要获取的属性名 propKey</span></span><br><span class="line">       <span class="comment">// example =&gt; 当前 py 这个实例</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key);</span><br><span class="line">       <span class="comment">// return &quot;default&quot;; 每次都会获取到固定返回值</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="title function_">set</span>(<span class="params">target, key, newValue, example</span>) &#123;</span><br><span class="line">       <span class="comment">// console.log(target, key, value, example);</span></span><br><span class="line">       <span class="comment">// newValue =&gt; 将要设置的新值  </span></span><br><span class="line">       <span class="keyword">if</span> (<span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, key) !== newValue) &#123;</span><br><span class="line">           <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, newValue);</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// get</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(py.<span class="property">name</span>); <span class="comment">//=&gt; &quot;Proxy&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(py.<span class="property">age</span>); <span class="comment">//=&gt; undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// set</span></span><br><span class="line">py.<span class="property">age</span> = <span class="string">&quot;20&quot;</span>;</span><br><span class="line">py.<span class="property">name</span> = <span class="string">&quot;newProxy&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(py);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br></pre></td></tr></table></figure><br/><ul><li><code>Proxy</code> 实例也可以作为其他对象的原型对象。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> py = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, key, example</span>) &#123;</span><br><span class="line">        <span class="comment">// if (key === &quot;__proto__&quot;) return example;  </span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;default&quot;</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="title function_">set</span>(<span class="params">target, key, newValue</span>) &#123;</span><br><span class="line">        <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, newValue);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = <span class="title class_">Object</span>.<span class="title function_">create</span>(py);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">df</span>); <span class="comment">//=&gt; &quot;default&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property">__proto__</span>); <span class="comment">//=&gt; &quot;default&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj.<span class="property"><span class="keyword">prototype</span></span>); <span class="comment">//=&gt; &quot;default&quot;</span></span><br></pre></td></tr></table></figure><br/></li></ul><p><a href="https://es6.ruanyifeng.com/#docs/proxy">阮一峰ES6-Proxy</a> 文档中，使用<code>get</code>拦截，实现数组读取负数的索引</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">createArray</span>(<span class="params">...elements</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> handler = &#123;</span><br><span class="line">    <span class="title function_">get</span>(<span class="params">target, propKey, receiver</span>) &#123;</span><br><span class="line">      <span class="keyword">let</span> index = <span class="title class_">Number</span>(propKey);</span><br><span class="line">      <span class="keyword">if</span> (index &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        propKey = <span class="title class_">String</span>(target.<span class="property">length</span> + index);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> <span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, propKey, receiver);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> target = [];</span><br><span class="line">  target.<span class="title function_">push</span>(...elements);</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Proxy</span>(target, handler);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = <span class="title function_">createArray</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line">arr[-<span class="number">1</span>] <span class="comment">// ==&gt; c</span></span><br></pre></td></tr></table></figure><p>上面代码中，数组的位置参数是-1，就会输出数组的倒数第一个成员。</p><p>利用<code> Proxy</code>，可以将读取属性的操作（<code>get</code>），转变为执行某个函数，从而实现属性的链式操作。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pipe = <span class="keyword">function</span> (<span class="params">value</span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> funcStack = [];</span><br><span class="line">  <span class="keyword">var</span> oproxy = <span class="keyword">new</span> <span class="title class_">Proxy</span>(&#123;&#125;, &#123;</span><br><span class="line">    <span class="attr">get</span>: <span class="keyword">function</span> (<span class="params">pipeObject, fnName</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (fnName === <span class="string">&#x27;get&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> funcStack.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">val, fn</span>) &#123;</span><br><span class="line">          <span class="keyword">return</span> <span class="title function_">fn</span>(val);</span><br><span class="line">        &#125;,value);</span><br><span class="line">      &#125;</span><br><span class="line">      funcStack.<span class="title function_">push</span>(<span class="variable language_">window</span>[fnName]);</span><br><span class="line">      <span class="keyword">return</span> oproxy;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> oproxy;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> <span class="title function_">double</span> = n =&gt; n * <span class="number">2</span>;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">pow</span>    = n =&gt; n * n;</span><br><span class="line"><span class="keyword">var</span> <span class="title function_">reverseInt</span> = n =&gt; n.<span class="title function_">toString</span>().<span class="title function_">split</span>(<span class="string">&quot;&quot;</span>).<span class="title function_">reverse</span>().<span class="title function_">join</span>(<span class="string">&quot;&quot;</span>) | <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="title function_">pipe</span>(<span class="number">3</span>).<span class="property">double</span>.<span class="property">pow</span>.<span class="property">reverseInt</span>.<span class="property">get</span>; <span class="comment">// ==&gt; 63</span></span><br></pre></td></tr></table></figure><p>上面代码设置<code> Proxy</code> 以后，达到了将函数名链式使用的效果。</p><h4 id="实例：使用-Proxy-实现观察者模式"><a href="#实例：使用-Proxy-实现观察者模式" class="headerlink" title="实例：使用 Proxy 实现观察者模式"></a>实例：使用 <code>Proxy</code> 实现观察者模式</h4><p>观察者模式（<code>Observer mode</code>）指的是函数自动观察数据对象，一旦对象有变化，函数就会自动执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = <span class="title function_">observable</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line">  <span class="attr">age</span>: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">print</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;person.name&#125;</span>, <span class="subst">$&#123;person.age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">observe</span>(print);</span><br><span class="line">person.<span class="property">name</span> = <span class="string">&#x27;李四&#x27;</span>;</span><br><span class="line"><span class="comment">// 输出</span></span><br><span class="line"><span class="comment">// 李四, 20</span></span><br></pre></td></tr></table></figure><p>上面代码中，数据对象<code>person</code>是观察目标，函数<code>print</code>是观察者。一旦数据对象发生变化，<code>print</code>就会自动执行。</p><p>下面，使用 <code>Proxy</code> 写一个观察者模式的最简单实现，即实现<code>observable</code>和<code>observe</code>这两个函数。思路是<code>observable</code>函数返回一个原始对象的 <code>Proxy</code> 代理，拦截赋值操作，触发充当观察者的各个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queuedObservers = <span class="keyword">new</span> <span class="title class_">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observe</span> = fn =&gt; queuedObservers.<span class="title function_">add</span>(fn);</span><br><span class="line"><span class="keyword">const</span> <span class="title function_">observable</span> = obj =&gt; <span class="keyword">new</span> <span class="title class_">Proxy</span>(obj, &#123;set&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">set</span>(<span class="params">target, key, value, receiver</span>) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, key, value, receiver);</span><br><span class="line">  queuedObservers.<span class="title function_">forEach</span>(<span class="function"><span class="params">observer</span> =&gt;</span> <span class="title function_">observer</span>());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，先定义了一个<code>Set</code>集合，所有观察者函数都放进这个集合。然后，<code>observable</code>函数返回原始对象的代理，拦截赋值操作。拦截函数<code>set</code>之中，会自动执行所有观察者。</p><p>了解更多的实例介绍，和其他拦截操作的方法介绍 &#x3D;&gt; <a href="https://es6.ruanyifeng.com/#docs/proxy">ES6-Proxy</a></p>]]></content>
    
    
    <summary type="html">&lt;p&gt;在即将到来的&lt;code&gt;Vue3.0&lt;/code&gt;中，&lt;code&gt;Vue&lt;/code&gt;数据的响应式系统采用了&lt;code&gt;ES6&lt;/code&gt;的&lt;code&gt;Proxy&lt;/code&gt;来代替&lt;code&gt;Object.defineProperty&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Object.defineProperty&lt;/code&gt; ：兼容主流浏览器和ie9以上的ie浏览器，能够监听数据对象的变化，但是监听不到对象属性的增删、数组元素和长度的变化，同时会在vue初始化的时候把所有的Observer都建立好，才能观察到数据对象属性的变化。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;Proxy&lt;/code&gt; : 可以做到监听对象属性的增删和数组元素和长度的修改，还可以监听&lt;code&gt;Map&lt;/code&gt;、&lt;code&gt;Set&lt;/code&gt;、&lt;code&gt;WeakSet&lt;/code&gt;、&lt;code&gt;WeakMap&lt;/code&gt;，同时还实现了惰性的监听，不会在初始化的时候创建所有的Observer，而是会在用到的时候才去监听。&lt;/li&gt;
&lt;/ul&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://zhangone.site/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Reflect</title>
    <link href="https://zhangone.site/posts/7db6df7e/"/>
    <id>https://zhangone.site/posts/7db6df7e/</id>
    <published>2020-05-11T04:12:09.000Z</published>
    <updated>2020-05-11T04:12:09.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单了解Reflect"><a href="#简单了解Reflect" class="headerlink" title="简单了解Reflect"></a>简单了解<code>Reflect</code></h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="keyword">new</span> <span class="title class_">Reflect</span>);  <span class="comment">// Error ==&gt; Reflect is not a constructor</span></span><br><span class="line"><span class="comment">// =&gt; 虽然是大写开头，但不是一个类，不可以被new；</span></span><br></pre></td></tr></table></figure><p> 概述：</p><ol><li>将<code>Object</code>对象的一些明显属于语言内部的方法（比如<code>Object.defineProperty</code>），放到<code>Reflect</code>对象上。现阶段，某些方法同时在<code>Object</code>和<code>Reflect</code>对象上部署，未来的新方法将只部署在<code>Reflect</code>对象上。也就是说，从<code>Reflect</code>对象上可以拿到语言内部的方法。 <span id="more"></span></li><li>修改某些<code>Object</code>方法的返回结果，让其变得更合理。比如，<code>Object.defineProperty(obj, name, desc)</code>在无法定义属性时，会抛出一个错误，而<code>Reflect.defineProperty(obj, name, desc)</code>则会返回<code>false</code>。</li><li>让<code>Object</code>操作都变成函数行为。某些<code>Object</code>操作是命令式，比如<code>name in obj</code>和<code>delete obj[name]</code>，而<code>Reflect.has(obj, name)</code>和<code>Reflect.deleteProperty(obj, name)</code>让它们变成了函数行为。<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;</span><br><span class="line">    <span class="attr">a</span>: <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>: <span class="number">2</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="string">&quot;a&quot;</span> <span class="keyword">in</span> obj <span class="comment">// =&gt; true  之前的旧语法，用关键字 in 判断某个属性是否属于某个对象</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">has</span>(obj, <span class="string">&quot;a&quot;</span>); <span class="comment">// =&gt; true  Reflect.has(); 函数形式的新语法，作用等同于上</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 列如：还有像删除属性的关键字 delete obj[key] ==&gt; Reflect.deleteProperty(obj,key);</span></span><br></pre></td></tr></table></figure></li><li><code>Reflect</code>对象的方法与<code>Proxy</code>对象的方法一一对应，只要是<code>Proxy</code>对象的方法，就能在<code>Reflect</code>对象上找到对应的方法。这就让<code>Proxy</code>对象可以方便地调用对应的<code>Reflect</code>方法，完成默认行为，作为修改行为的基础。也就是说，不管<code>Proxy</code>怎么修改默认行为，你总可以在<code>Reflect</code>上获取默认行为。</li></ol><h2 id="简单粗暴：直接打印它"><a href="#简单粗暴：直接打印它" class="headerlink" title="简单粗暴：直接打印它"></a>简单粗暴：直接打印它</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title class_">Reflect</span>); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 省张图片，控制台结果粘过来</span></span><br><span class="line">&#123;<span class="attr">defineProperty</span>: ƒ, <span class="attr">deleteProperty</span>: ƒ, <span class="attr">apply</span>: ƒ, <span class="attr">construct</span>: ƒ, <span class="attr">get</span>: ƒ, …&#125;</span><br><span class="line"><span class="attr">apply</span>: ƒ <span class="title function_">apply</span>()</span><br><span class="line"><span class="attr">construct</span>: ƒ <span class="title function_">construct</span>()</span><br><span class="line"><span class="attr">defineProperty</span>: ƒ <span class="title function_">defineProperty</span>()</span><br><span class="line"><span class="attr">deleteProperty</span>: ƒ <span class="title function_">deleteProperty</span>()</span><br><span class="line"><span class="attr">get</span>: ƒ ()</span><br><span class="line"><span class="attr">getOwnPropertyDescriptor</span>: ƒ <span class="title function_">getOwnPropertyDescriptor</span>()</span><br><span class="line"><span class="attr">getPrototypeOf</span>: ƒ <span class="title function_">getPrototypeOf</span>()</span><br><span class="line"><span class="attr">has</span>: ƒ <span class="title function_">has</span>()</span><br><span class="line"><span class="attr">isExtensible</span>: ƒ <span class="title function_">isExtensible</span>()</span><br><span class="line"><span class="attr">ownKeys</span>: ƒ <span class="title function_">ownKeys</span>()</span><br><span class="line"><span class="attr">preventExtensions</span>: ƒ <span class="title function_">preventExtensions</span>()</span><br><span class="line"><span class="attr">set</span>: ƒ ()</span><br><span class="line"><span class="attr">setPrototypeOf</span>: ƒ <span class="title function_">setPrototypeOf</span>()</span><br><span class="line"><span class="attr">__proto__</span>: <span class="title class_">Object</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="Reflect对象目前一共有-13-个静态方法"><a href="#Reflect对象目前一共有-13-个静态方法" class="headerlink" title="Reflect对象目前一共有 13 个静态方法"></a>Reflect对象目前一共有 13 个静态方法</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">apply</span>(target, thisArg, args) </span><br><span class="line"><span class="comment">//=&gt; Reflect.apply方法等同于Function.prototype.apply.call(func, thisArg, args)，用于绑定this对象后执行给定函数。一般来说，如果要绑定一个函数的this对象，可以这样写fn.apply(obj, args)，但是如果函数定义了自己的apply方法，就只能写成Function.prototype.apply.call(fn, obj, args)，采用Reflect对象可以简化这种操作。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">construct</span>(target, args) </span><br><span class="line"><span class="comment">//=&gt; 以 new 方式去执行一个构造函数  new Fn() ==&gt; Reflect.construct(Fn,实参)</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">get</span>(target, name, receiver) </span><br><span class="line"><span class="comment">//=&gt; 获取对象的某个属性的值 ==&gt; obj.key</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">set</span>(target, name, value, receiver) </span><br><span class="line"><span class="comment">//=&gt; 设置对象的某个属性的值 ==&gt; obj.key = &quot;new value&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">defineProperty</span>(target, name, desc)  </span><br><span class="line"><span class="comment">// =&gt; Reflect.defineProperty方法基本等同于Object.defineProperty，用来为对象定义属性。未来，后者会被逐渐废除，请从现在开始就使用Reflect.defineProperty代替它。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">deleteProperty</span>(target, name)  </span><br><span class="line"><span class="comment">// =&gt; Reflect.deleteProperty方法等同于delete obj[name]，用于删除对象的属性。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">has</span>(target, name) </span><br><span class="line"><span class="comment">// =&gt; Reflect.has方法对应name in obj里面的in运算符。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">ownKeys</span>(target)  </span><br><span class="line"><span class="comment">// =&gt; Reflect.ownKeys方法用于返回对象的所有属性，基本等同于Object.getOwnPropertyNames与Object.getOwnPropertySymbols之和。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">isExtensible</span>(target) </span><br><span class="line"><span class="comment">// =&gt; Reflect.isExtensible方法对应Object.isExtensible，返回一个布尔值，表示当前对象是否可扩展。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">preventExtensions</span>(target) </span><br><span class="line"><span class="comment">// =&gt; Reflect.preventExtensions对应Object.preventExtensions方法，用于让一个对象变为不可扩展。它返回一个布尔值，表示是否操作成功。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">getOwnPropertyDescriptor</span>(target, name) </span><br><span class="line"><span class="comment">// =&gt; Reflect.getOwnPropertyDescriptor基本等同于Object.getOwnPropertyDescriptor，用于得到指定属性的描述对象，将来会替代掉后者。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">getPrototypeOf</span>(target)  </span><br><span class="line"><span class="comment">// =&gt; Reflect.getPrototypeOf方法用于读取对象的__proto__属性，对应Object.getPrototypeOf(obj)。</span></span><br><span class="line"></span><br><span class="line"><span class="title class_">Reflect</span>.<span class="title function_">setPrototypeOf</span>(target, prototype) </span><br><span class="line"><span class="comment">// =&gt; Reflect.setPrototypeOf方法用于设置目标对象的原型（prototype），对应Object.setPrototypeOf(obj, newProto)方法。它返回一个布尔值，表示是否设置成功。</span></span><br></pre></td></tr></table></figure><p>上面这些方法的作用， 大部分与<code>Object</code>对象的同名方法的作用都是相同的， 而且它与<code>Proxy</code>对象的方法是一一对应的。 </p><p>未来<code>Object</code>上的一些方法，还有其他一些对象的操作语法，都会进行规范式的处理，有的可能会稍微改动。 并且会逐渐废弃<code>Object</code>上的某些方法，但会转移到新的 <code>Reflect</code> 这个对象上面。</p><p><a href="https://es6.ruanyifeng.com/#docs/reflect">更加详情了解–ES6-Reflect</a></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简单了解Reflect&quot;&gt;&lt;a href=&quot;#简单了解Reflect&quot; class=&quot;headerlink&quot; title=&quot;简单了解Reflect&quot;&gt;&lt;/a&gt;简单了解&lt;code&gt;Reflect&lt;/code&gt;&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;variable language_&quot;&gt;console&lt;/span&gt;.&lt;span class=&quot;title function_&quot;&gt;log&lt;/span&gt;(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;title class_&quot;&gt;Reflect&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// Error ==&amp;gt; Reflect is not a constructor&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; 虽然是大写开头，但不是一个类，不可以被new；&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt; 概述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;将&lt;code&gt;Object&lt;/code&gt;对象的一些明显属于语言内部的方法（比如&lt;code&gt;Object.defineProperty&lt;/code&gt;），放到&lt;code&gt;Reflect&lt;/code&gt;对象上。现阶段，某些方法同时在&lt;code&gt;Object&lt;/code&gt;和&lt;code&gt;Reflect&lt;/code&gt;对象上部署，未来的新方法将只部署在&lt;code&gt;Reflect&lt;/code&gt;对象上。也就是说，从&lt;code&gt;Reflect&lt;/code&gt;对象上可以拿到语言内部的方法。</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://zhangone.site/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>Vue数据双向绑定</title>
    <link href="https://zhangone.site/posts/cec8bac/"/>
    <id>https://zhangone.site/posts/cec8bac/</id>
    <published>2020-04-25T04:23:13.000Z</published>
    <updated>2020-05-04T15:21:32.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="MVC-amp-MVVM"><a href="#MVC-amp-MVVM" class="headerlink" title="MVC &amp; MVVM"></a>MVC &amp; MVVM</h4><ul><li><p>传统操作<code>DOM</code>模式</p></li><li><p>MVC：<code>model view controller</code></p></li><li><p>MVVM：<code>model view viewModel</code></p><span id="more"></span><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/Vue/VueMVVM-1.png"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/Vue/MVVM-2.png" alt="MVVM-2"></p></li></ul><h3 id="双向数据绑定的实现原理"><a href="#双向数据绑定的实现原理" class="headerlink" title="双向数据绑定的实现原理"></a>双向数据绑定的实现原理</h3><ul><li>Object.defineProperty</li><li>实现的底层原理  :   <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//obServer:观察者</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">obServer</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj &amp;&amp; <span class="keyword">typeof</span> obj === <span class="string">&#x27;object&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> obj) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!obj.<span class="title function_">hasOwnProperty</span>(key)) <span class="keyword">break</span>;</span><br><span class="line">            <span class="title function_">defineReactive</span>(obj, key, obj[key]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">defineReactive</span>(<span class="params">obj, key, value</span>) &#123;</span><br><span class="line">    <span class="title function_">obServer</span>(value);</span><br><span class="line">    <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(obj, key, &#123;</span><br><span class="line">        <span class="title function_">get</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> value;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span><br><span class="line">            <span class="title function_">observer</span>(newValue);</span><br><span class="line">            <span class="keyword">if</span> (value === newValue) <span class="keyword">return</span>;</span><br><span class="line">            value = newValue;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">$set</span>(<span class="params">data, key, value</span>) &#123;</span><br><span class="line">    <span class="title function_">defineReactive</span>(data, key, value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h4 id="核心原理及代码实现"><a href="#核心原理及代码实现" class="headerlink" title="核心原理及代码实现"></a>核心原理及代码实现</h4><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/Vue/MVVM-3.png" alt="MVVM-3"></p><ol><li>解析Vue指令的  —— <code>v-model</code></li><li>编译Vue中的取值语法 —— <code>&#123; &#123;...&#125; &#125;</code></li><li>实现对表单元素<code>input</code> 双向数据监听</li></ol><p><strong>这次使用ES6定义class类的形式来实现。就不使用ES5了</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Vue-MVVM<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">p</span> <span class="attr">a</span>=<span class="string">&quot;21&quot;</span>&gt;</span>&#123;&#123; msg &#125;&#125; <span class="symbol">&amp;nbsp;</span> 这是静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;val&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; val &#125;&#125; 静态文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;https://fastly.jsdelivr.net/npm/vue/dist/vue.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * obServer: 数据监听（拦截）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * compile: 指令解析</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * Dep: 订阅器（事件池，发布器）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         * Watcher: 订阅者：（订阅）</span></span></span><br><span class="line"><span class="comment"><span class="language-javascript">         */</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Dep</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Dep</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">subs</span> = [];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">subscribe</span>(<span class="params">sub</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">push</span>(sub);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">notify</span>(<span class="params">oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">this</span>.<span class="property">subs</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">subs</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    item.<span class="title function_">update</span>(oldValue);</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// Watcher</span></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">Watcher</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">node, key, vm</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">node</span> = node;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">key</span> = key;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">vm</span> = vm;</span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">Dep</span>.<span class="property">curWatcher</span> = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">Dep</span>.<span class="property">curWatcher</span> = <span class="literal">null</span>;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">getData</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">vm</span>.<span class="property">_data</span>[<span class="variable language_">this</span>.<span class="property">key</span>];</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">update</span>(<span class="params">oldValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeType</span> == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeName</span> === <span class="string">&quot;INPUT&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="title function_">getData</span>();</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// .....</span></span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> oldText = <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeValue</span>;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">node</span>.<span class="property">nodeValue</span> = oldText.<span class="title function_">replace</span>(oldValue, <span class="variable language_">this</span>.<span class="title function_">getData</span>());</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">class</span> <span class="title class_">myVue</span> &#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">constructor</span>(<span class="params">options</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> _this;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">//=&gt; init example</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">_data</span> = <span class="keyword">typeof</span> options.<span class="property">data</span> === <span class="string">&quot;function&quot;</span> ? options.<span class="title function_">data</span>() : options.<span class="property">data</span>;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$el</span> = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(options.<span class="property">el</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// data obServer</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">obServer</span>(<span class="variable language_">this</span>.<span class="property">_data</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// nodeToFragment &amp;&amp; Compile</span></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">nodeToFragment</span>(<span class="variable language_">this</span>.<span class="property">$el</span>);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="property">$root</span> = <span class="variable language_">this</span>;</span></span><br><span class="line"><span class="language-javascript">                _this = <span class="title class_">Object</span>.<span class="title function_">assign</span>(<span class="variable language_">this</span>.<span class="property">_data</span>, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> _this;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// prototype</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">obServer</span>(<span class="params">data</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (data &amp;&amp; <span class="keyword">typeof</span> data === <span class="string">&quot;object&quot;</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> data) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (!data.<span class="title function_">hasOwnProperty</span>(key)) <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">defineReactive</span>(data, key, data[key]);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// data intercept</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">defineReactive</span>(<span class="params">data, key, value</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="variable language_">this</span>.<span class="title function_">obServer</span>(value);</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">const</span> dep = <span class="keyword">new</span> <span class="title class_">Dep</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> oldValue = value;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="title class_">Object</span>.<span class="title function_">defineProperty</span>(data, key, &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">get</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (<span class="title class_">Dep</span>.<span class="property">curWatcher</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                            dep.<span class="title function_">subscribe</span>(<span class="title class_">Dep</span>.<span class="property">curWatcher</span>);</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">return</span> value;</span></span><br><span class="line"><span class="language-javascript">                    &#125;,</span></span><br><span class="line"><span class="language-javascript">                    <span class="title function_">set</span>(<span class="params">newValue</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (newValue === oldValue) <span class="keyword">return</span>;</span></span><br><span class="line"><span class="language-javascript">                        oldValue = value;</span></span><br><span class="line"><span class="language-javascript">                        value = newValue;</span></span><br><span class="line"><span class="language-javascript">                        dep.<span class="title function_">notify</span>(oldValue);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// instruct-model</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">instructModel</span>(<span class="params">node, attr</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 可根据input不同的type类型，设置不同的属性。  如： checked</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> nodeValue = attr.<span class="property">nodeValue</span>,</span></span><br><span class="line"><span class="language-javascript">                    nodeName = attr.<span class="property">nodeName</span>;</span></span><br><span class="line"><span class="language-javascript">                node.<span class="property">value</span> = <span class="variable language_">this</span>.<span class="property">_data</span>[nodeValue]; <span class="comment">// nodeValue 取到 data 中对应的字段</span></span></span><br><span class="line"><span class="language-javascript">                node.<span class="title function_">removeAttribute</span>(nodeName); <span class="comment">// 删除行间指令</span></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                node.<span class="title function_">addEventListener</span>(<span class="string">&quot;input&quot;</span>, <span class="function"><span class="params">ev</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="property">_data</span>[nodeValue] = ev.<span class="property">currentTarget</span>.<span class="property">value</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;, <span class="literal">false</span>);</span></span><br><span class="line"><span class="language-javascript">                <span class="comment">// 创建观察者（监听）</span></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">new</span> <span class="title class_">Watcher</span>(node, nodeValue, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// Compile</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">compile</span>(<span class="params">node</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">if</span> (node.<span class="property">nodeType</span> == <span class="number">1</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 获取元素的节点的行间属性</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> attrs = node.<span class="property">attributes</span>,</span></span><br><span class="line"><span class="language-javascript">                        nodes = node.<span class="property">childNodes</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; attrs.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">let</span> curAttr = attrs[i],</span></span><br><span class="line"><span class="language-javascript">                            curAttrName = curAttr.<span class="property">nodeName</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                        <span class="keyword">if</span> (<span class="regexp">/^v\-/</span>.<span class="title function_">test</span>(curAttrName)) &#123;</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">switch</span> (curAttrName.<span class="title function_">substring</span>(<span class="number">2</span>)) &#123; <span class="comment">//=&gt; 匹配对应v-指令</span></span></span><br><span class="line"><span class="language-javascript">                                <span class="keyword">case</span> <span class="string">&quot;model&quot;</span>:</span></span><br><span class="line"><span class="language-javascript">                                    <span class="variable language_">this</span>.<span class="title function_">instructModel</span>(node, curAttr);</span></span><br><span class="line"><span class="language-javascript">                                    <span class="keyword">break</span>;</span></span><br><span class="line"><span class="language-javascript">                                    <span class="comment">// .... 更多指令</span></span></span><br><span class="line"><span class="language-javascript">                            &#125;;</span></span><br><span class="line"><span class="language-javascript">                        &#125;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 递归处理其子节点</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nodes.<span class="property">length</span>; i++) &#123;</span></span><br><span class="line"><span class="language-javascript">                        <span class="variable language_">this</span>.<span class="title function_">compile</span>(nodes[i]);</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="comment">// 解析非元素节点</span></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">let</span> text = node.<span class="property">nodeValue</span>,</span></span><br><span class="line"><span class="language-javascript">                        reg = <span class="regexp">/\&#123;\&#123;(.+?)\&#125;\&#125;/g</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                    <span class="keyword">if</span> (reg.<span class="title function_">test</span>(text)) &#123;</span></span><br><span class="line"><span class="language-javascript">                        text = text.<span class="title function_">replace</span>(reg, <span class="function">(<span class="params">g, key</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                            key = key.<span class="title function_">trim</span>();</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">if</span> (key) <span class="keyword">new</span> <span class="title class_">Watcher</span>(node, key, <span class="variable language_">this</span>);</span></span><br><span class="line"><span class="language-javascript">                            <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="property">_data</span>[key];</span></span><br><span class="line"><span class="language-javascript">                        &#125;);</span></span><br><span class="line"><span class="language-javascript">                        node.<span class="property">nodeValue</span> = text;</span></span><br><span class="line"><span class="language-javascript">                    &#125;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">            <span class="comment">// nodeToFragment</span></span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">nodeToFragment</span>(<span class="params">element</span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> frag = <span class="variable language_">document</span>.<span class="title function_">createDocumentFragment</span>();</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">let</span> firstNode = element.<span class="property">firstChild</span>;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">while</span> (firstNode) &#123;</span></span><br><span class="line"><span class="language-javascript">                    frag.<span class="title function_">appendChild</span>(firstNode);</span></span><br><span class="line"><span class="language-javascript">                    <span class="variable language_">this</span>.<span class="title function_">compile</span>(firstNode);</span></span><br><span class="line"><span class="language-javascript">                    firstNode = element.<span class="property">firstChild</span>;</span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">                element.<span class="title function_">appendChild</span>(frag);</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;;</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="keyword">const</span> myVm = <span class="keyword">new</span> <span class="title function_">myVue</span>(&#123;</span></span><br><span class="line"><span class="language-javascript">            <span class="attr">el</span>: <span class="string">&quot;#app&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">            <span class="title function_">data</span>(<span class="params"></span>) &#123;</span></span><br><span class="line"><span class="language-javascript">                <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">msg</span>: <span class="string">&quot;这是一个动态添加的文本&quot;</span>,</span></span><br><span class="line"><span class="language-javascript">                    <span class="attr">val</span>: <span class="number">666</span></span></span><br><span class="line"><span class="language-javascript">                &#125;</span></span><br><span class="line"><span class="language-javascript">            &#125;</span></span><br><span class="line"><span class="language-javascript">        &#125;);</span></span><br><span class="line"><span class="language-javascript">        <span class="variable language_">console</span>.<span class="title function_">log</span>(myVm);</span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript"></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// const vm = new Vue(&#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     el: &quot;#app&quot;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     data() &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         return &#123;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//             msg: &quot;这是一个动态添加的文本&quot;,</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//             val: 666</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//         &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">//     &#125;</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// &#125;);</span></span></span><br><span class="line"><span class="language-javascript">        <span class="comment">// console.log(vm);</span></span></span><br><span class="line"><span class="language-javascript">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>看一下真<code>Vue</code>的效果：<br><img src="https://cdn.zhangone.site/PhotoBed/img/blog/Vue/Vue-effect.png" alt="Vue-effect"></p><p><strong>再来看一下<code>myVue</code></strong>:<br><img src="https://cdn.zhangone.site/PhotoBed/img/blog/Vue/myVue-effect.png" alt="myVue-effect"><br>稍有瑕疵，问题不大</p><h4 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h4><p><code>Vue</code> 主要通过以下 4 个步骤来实现数据双向绑定的：</p><ul><li><p>实现一个监听器 <code>Observer</code>：对数据对象进行遍历，包括子属性对象的属性，利用 <code>Object.defineProperty()</code> 对属性都加上 <code>setter</code> 和 <code>getter</code>。这样的话，给这个对象的某个值赋值，就会触发 <code>setter</code>，那么就能监听到了数据变化。</p></li><li><p>实现一个解析器 <code>Compile</code>：解析 <code>Vue</code> 模板指令，将模板中的变量都替换成数据，然后初始化渲染页面视图，并将每个指令对应的节点绑定更新函数，添加监听数据的订阅者，一旦数据有变动，收到通知，调用更新函数进行数据更新。</p></li><li><p>实现一个订阅者 <code>Watcher</code>：<code>Watcher</code> 订阅者是 <code>Observer</code> 和 <code>Compile</code> 之间通信的桥梁 ，主要的任务是订阅 <code>Observer</code> 中的属性值变化的消息，当收到属性值变化的消息时，触发解析器 <code>Compile</code> 中对应的更新函数。</p></li><li><p>实现一个订阅器 <code>Dep</code>：订阅器采用 发布-订阅 设计模式，用来收集订阅者 <code>Watcher</code>，对监听器 <code>Observer</code> 和 订阅者 <code>Watcher</code> 进行统一管理。</p></li></ul>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;MVC-amp-MVVM&quot;&gt;&lt;a href=&quot;#MVC-amp-MVVM&quot; class=&quot;headerlink&quot; title=&quot;MVC &amp;amp; MVVM&quot;&gt;&lt;/a&gt;MVC &amp;amp; MVVM&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;传统操作&lt;code&gt;DOM&lt;/code&gt;模式&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MVC：&lt;code&gt;model view controller&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MVVM：&lt;code&gt;model view viewModel&lt;/code&gt;&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://zhangone.site/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>redux-compose.js</title>
    <link href="https://zhangone.site/posts/83dcefb7/"/>
    <id>https://zhangone.site/posts/83dcefb7/</id>
    <published>2020-03-30T19:14:09.000Z</published>
    <updated>2020-03-30T19:14:09.000Z</updated>
    
    <content type="html"><![CDATA[<p><code>redux</code>是js模块开发中的一个状态管理库，与其他框架没有直接的关系，如：<code>react</code>。 所以<code>redux</code>可以直接在别的环境下使用。由于没有和<code>react</code> 相关逻辑耦合，所以<code> redux</code> 的源码很纯粹，目的就是把如何数据管理好。而真正在 <code>react</code> 项目中使用 <code>redux</code> 时，是需要有一个<code>react-redux</code>当作连接器，去连接<code>react</code>和 <code>redux</code> 。</p><span id="more"></span><h4 id="compose-js"><a href="#compose-js" class="headerlink" title="compose.js"></a>compose.js</h4><p><code>redux</code>基本的五个<code>API</code>中，compose.js是唯一一个能单独拿出来使用的函数。函数式编程中常用的组合函数，和<code>redux</code>本身联系不大</p><ul><li><p>先看一下 <strong>compose.js</strong> 源码</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...funcs</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="params">arg</span> =&gt;</span> arg</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">1</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> funcs[<span class="number">0</span>]</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">a</span>(<span class="title function_">b</span>(...args)))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  其实 <code>compose</code> 函数做的事就是把 <code>A(B(C(10)));</code> 这种嵌套的调用方式改成 <code>compose(A, B, C)(10);</code> 的方式调用。</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">A</span>(<span class="params">x</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> x + <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">B</span>(<span class="params">y</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> y - <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">C</span>(<span class="params">z</span>) &#123;</span><br><span class="line">    <span class="keyword">return</span> z;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 把一个函数执行的结果当作另外一个函数执行的实参</span></span><br><span class="line"><span class="comment">// A(B(C(10)));  // --&gt; 10</span></span><br><span class="line">⬇</span><br><span class="line"><span class="comment">// compose(A, B, C)(10); </span></span><br></pre></td></tr></table></figure></li></ul><h4 id="先简单了解下数组方法-reduce"><a href="#先简单了解下数组方法-reduce" class="headerlink" title="先简单了解下数组方法 reduce"></a>先简单了解下数组方法 <code>reduce</code></h4><ul><li>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">arr.<span class="title function_">reduce</span>(<span class="keyword">function</span>(<span class="params">prev,cur,index,arr</span>)&#123;</span><br><span class="line">  <span class="comment">// 参数介绍</span></span><br><span class="line">  arr 表示原数组；</span><br><span class="line">prev 表示上一次调用回调时的返回值，或者初始值 init;</span><br><span class="line">cur 表示当前正在处理的数组元素；</span><br><span class="line">index 表示当前正在处理的数组元素的索引，若提供 init 值，则索引为<span class="number">0</span>，否则索引为<span class="number">1</span>；</span><br><span class="line">init 表示初始值</span><br><span class="line">&#125;, init);</span><br></pre></td></tr></table></figure></li><li><p>利用reduce做一个number求和</p>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>].<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(a, b);</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">    <span class="comment">// a : 每一次循环处理返回的结果；如果设置了init初始值，第一轮a就是init</span></span><br><span class="line">    <span class="comment">// b : 依次循环中数组的每一项</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul><h4 id="拆分reduce执行步骤，简单梳理一下处理流程"><a href="#拆分reduce执行步骤，简单梳理一下处理流程" class="headerlink" title="拆分reduce执行步骤，简单梳理一下处理流程"></a>拆分<code>reduce</code>执行步骤，简单梳理一下处理流程</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">compose</span>(<span class="params">...funcs</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">0</span>) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span> (funcs.<span class="property">length</span> === <span class="number">1</span>) <span class="keyword">return</span> funcs[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 箭头函数转成function形式</span></span><br><span class="line">    <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(<span class="keyword">function</span> (<span class="params">a, b</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="title function_">a</span>(<span class="title function_">b</span>(...args));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// [A, B, C, D, E, F] ： 假设有六个函数</span></span><br><span class="line">    <span class="comment">// 第一轮</span></span><br><span class="line">    a = A, b = B</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123; <span class="keyword">return</span> <span class="title function_">A</span>(<span class="title function_">b</span>(...args)) &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第二轮</span></span><br><span class="line">    a = <span class="keyword">function</span> (<span class="params">...args</span>) &#123; <span class="keyword">return</span> <span class="title function_">A</span>(<span class="title function_">b</span>(...args)) &#125;, b = C</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123; <span class="keyword">return</span> <span class="title function_">A</span>(<span class="title function_">b</span>(...args)) &#125;(<span class="title function_">C</span>(...args))</span><br><span class="line">    &#125;</span><br><span class="line">        ==&gt; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">                     ...args ==&gt; [<span class="title function_">C</span>(...args)]</span><br><span class="line">                 <span class="keyword">return</span> <span class="title function_">A</span>(<span class="title function_">b</span>(<span class="title function_">C</span>(...args))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 第三轮</span></span><br><span class="line">    a = <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123; <span class="keyword">return</span> <span class="title function_">A</span>(<span class="title function_">b</span>(...args)) &#125;(<span class="title function_">C</span>(...args))</span><br><span class="line">    &#125;, b = D</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123; <span class="keyword">return</span> <span class="title function_">A</span>(<span class="title function_">b</span>(...args)) &#125;(<span class="title function_">C</span>(...args))</span><br><span class="line">        &#125;(<span class="title function_">D</span>(...args))</span><br><span class="line">    &#125;</span><br><span class="line">        ==&gt; </span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line">                     ...args ==&gt; [<span class="title function_">D</span>(...args)]</span><br><span class="line">                 <span class="keyword">return</span> <span class="title function_">A</span>(<span class="title function_">b</span>(<span class="title function_">C</span>(<span class="title function_">D</span>(...args)))</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// ............至数组最后一项之后结束循环 --&gt;</span></span><br><span class="line">    <span class="comment">// ===&gt;  A(B(C(D(E(F(...args)))))) --&gt; (10)  --&gt;  A(B(C(D(E(F(10))))))</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> funcs.<span class="title function_">reduce</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> <span class="function">(<span class="params">...args</span>) =&gt;</span> <span class="title function_">a</span>(<span class="title function_">b</span>(...args)));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// compose(A, B, C)(10);</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="title function_">compose</span>(A, B, C)(<span class="number">10</span>)); <span class="comment">// --&gt; 10</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>compose</code> 函数在函数式编程里很常见。这里<code>redux</code>的对 <code>compose</code> 实现很简单，理解起来却没有那么容易，主要还是因为对 <code>Array.prototype.reduce</code> 这个数组函数没有那么熟练，其次就是这种接受函数返回函数的写法，再配上箭头函数几个连续的 &#x3D;&gt; ，让人容易看晕。不过只要按执行步骤慢慢的捋执行顺序，还是比较容易理解的。。嗝~</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;&lt;code&gt;redux&lt;/code&gt;是js模块开发中的一个状态管理库，与其他框架没有直接的关系，如：&lt;code&gt;react&lt;/code&gt;。 所以&lt;code&gt;redux&lt;/code&gt;可以直接在别的环境下使用。由于没有和&lt;code&gt;react&lt;/code&gt; 相关逻辑耦合，所以&lt;code&gt; redux&lt;/code&gt; 的源码很纯粹，目的就是把如何数据管理好。而真正在 &lt;code&gt;react&lt;/code&gt; 项目中使用 &lt;code&gt;redux&lt;/code&gt; 时，是需要有一个&lt;code&gt;react-redux&lt;/code&gt;当作连接器，去连接&lt;code&gt;react&lt;/code&gt;和 &lt;code&gt;redux&lt;/code&gt; 。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="redux" scheme="https://zhangone.site/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>ES6-Promise.then</title>
    <link href="https://zhangone.site/posts/dfe13b31/"/>
    <id>https://zhangone.site/posts/dfe13b31/</id>
    <published>2020-03-21T16:42:08.000Z</published>
    <updated>2020-03-21T16:42:08.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="简单了解一下Promise"><a href="#简单了解一下Promise" class="headerlink" title="简单了解一下Promise"></a>简单了解一下Promise</h2><p><strong>在阮一峰大神的ES6入门文章中，关于对Promise的介绍</strong>：</p><blockquote><p><code>Promise</code> 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了<code>Promise</code>对象。</p></blockquote><blockquote><p>所谓<code>Promise</code>，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，<code>Promise</code> 是一个对象，从它可以获取异步操作的消息。<code>Promise</code> 提供统一的 API，各种异步操作都可以用同样的方法进行处理。</p></blockquote><span id="more"></span><blockquote><p><code>Promise</code>对象有以下两个特点。</p><p>（1）对象的状态不受外界影响。<code>Promise</code>对象代表一个异步操作，有三种状态：<code>pending</code>（进行中）、<code>fulfilled</code>（已成功）和<code>rejected</code>（已失败）。只有异步操作的结果，可以决定当前是哪一种状态，任何其他操作都无法改变这个状态。这也是<code>Promise</code>这个名字的由来，它的英语意思就是“承诺”，表示其他手段无法改变。</p><p>（2）一旦状态改变，就不会再变，任何时候都可以得到这个结果。<code>Promise</code>对象的状态改变，只有两种可能：从<code>pending</code>变为<code>fulfilled</code>和从<code>pending</code>变为<code>rejected</code>。只要这两种情况发生，状态就凝固了，不会再变了，会一直保持这个结果，这时就称为<code> resolved</code>（已定型）。如果改变已经发生了，你再对<code>Promise</code>对象添加回调函数，也会立即得到这个结果。这与事件<code>（Event）</code>完全不同，事件的特点是，如果你错过了它，再去监听，是得不到结果的。</p></blockquote><p>有了<code>Promise</code>对象，就可以将异步操作以同步操作的流程表达出来，避免了层层嵌套的回调函数。此外，<code>Promise</code>对象提供统一的接口，使得控制异步操作更加容易。</p><p><code>Promise</code>也有一些缺点。首先，无法取消<code>Promise</code>，一旦新建它就会立即执行，无法中途取消。其次，如果不设置回调函数，<code>Promise</code>内部抛出的错误，不会反应到外部。第三，当处于<code>pending</code>状态时，无法得知目前进展到哪一个阶段（刚刚开始还是即将完成）。</p><p>如果某些事件不断地反复发生，一般来说，使用 <code>Stream</code> 模式是比部署<code>Promise</code>更好的选择。</p><h2 id="回调地狱"><a href="#回调地狱" class="headerlink" title="回调地狱"></a>回调地狱</h2><p>什么是 <strong>回调地狱</strong>（Callback Hell），它还有一个显得很霸气却极为令所有JS开发者感到无比厌烦的名字—— <strong>厄运金字塔</strong>（Pyramid of doom）。之所以先了解这些，这是因为<code>Promise</code>本来就是为了避免在多重异步操作时产生深层次的嵌套回调提出的一种新型异步解决方案。</p><p><strong>举个列子</strong>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">load</span> (src,cb) &#123;</span><br><span class="line">     <span class="keyword">let</span> es = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">     es.<span class="property">src</span> = src </span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(es)</span><br><span class="line">     es.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">cb</span>() &#125;</span><br><span class="line">     es.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">cb</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;failed to load &#x27;</span>+src )) &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_">load</span>(<span class="string">&#x27;./t1.js&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err === <span class="literal">undefined</span>) &#123;</span><br><span class="line">         <span class="title function_">f1</span>();      <span class="comment">// t1内部的函数</span></span><br><span class="line">     &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">         <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>上面的代码是很很常见的需求，随便添加一个js，然后执行里面的内容。 但是也会需要加载多个脚本，同时执行一些函数：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">load</span>(<span class="string">&#x27;./t1.js&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(err === <span class="literal">undefined</span>) &#123;</span><br><span class="line">        <span class="title function_">f1</span>();      <span class="comment">// t1内部的函数</span></span><br><span class="line">        <span class="title function_">load</span>(<span class="string">&#x27;./t2.js&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(err === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                <span class="title function_">f2</span>();      <span class="comment">// t2内部的函数</span></span><br><span class="line">                <span class="title function_">load</span>(<span class="string">&#x27;./t3.js&#x27;</span>, <span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span>(err === <span class="literal">undefined</span>) &#123;</span><br><span class="line">                        <span class="title function_">f3</span>();      <span class="comment">// t3内部的函数</span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(err.<span class="property">message</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这样的多重操作，会随着嵌套层数变深逐渐失控，于是便形成了臭名昭著的厄运金字塔。为了解决这个问题，于是<code>Promise</code>便应运而生——主要是将<strong>深层回调</strong>变成了<strong>链式调用</strong>，这样能更符合人类逻辑：</p><p>第一步：先让<code>load</code>返回一个<code>Promise</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 每个 load 返回一个 Promise 对象</span></span><br><span class="line"><span class="comment">// 每个Promise对象都有一个 then 方法。</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">load</span> (src) &#123;</span><br><span class="line">    <span class="keyword">let</span> es = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;script&#x27;</span>)</span><br><span class="line">    es.<span class="property">src</span> = src </span><br><span class="line">    <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">append</span>(es)</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        es.<span class="property">onload</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">resolve</span>(<span class="string">&#x27;success &#x27;</span>+ src) &#125;</span><br><span class="line">        es.<span class="property">onerror</span> = <span class="function">() =&gt;</span> &#123; <span class="title function_">reject</span>(<span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;failed to load &#x27;</span>+src )) &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二步： 链式调用：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="title function_">load</span>(<span class="string">&#x27;./t1.js&#x27;</span>)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">        <span class="title function_">f1</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">load</span>(<span class="string">&#x27;./t2.js&#x27;</span>)   <span class="comment">//这里返回一个Promise</span></span><br><span class="line">    &#125;)                           <span class="comment">// 直接就能用 then</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">        <span class="title function_">f2</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">load</span>(<span class="string">&#x27;./t3.js&#x27;</span>)<span class="comment">// 再返回一个Promise</span></span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">str</span> =&gt;</span> &#123;           </span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">        <span class="title function_">f3</span>();</span><br><span class="line">    &#125;)</span><br><span class="line">    .<span class="title function_">catch</span>(<span class="function"><span class="params">er</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(er.<span class="property">message</span>);</span><br><span class="line">    &#125;)</span><br></pre></td></tr></table></figure><p>这样的代码看着就很舒服~</p><p><code>Promise</code>极其重要的特征是链式调用，每个<code>load</code>函数返回一个<code>Promise</code>，该<code>Promise</code>在<strong>确定是异步加载成功还是失败之后</strong>就会被返回然后提供给下一个操作使用。 一个<code>Promise</code>队列就像是使用同步代码来实现异步操作一样。</p><ul><li>引用 MDN 上的<code>Promise</code>概念：<blockquote><p><code>Promise</code> 对象是一个代理对象（代理一个值），被代理的值在<code>Promise</code>对象创建时可能是未知的。它允许你为异步操作的成功和失败分别绑定相应的处理方法。 这让异步方法可以像同步方法那样返回值，但并不是立即返回最终执行结果，而是一个能代表未来出现的结果的<code>Promise</code>对象</p></blockquote></li></ul><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Javascript 中的 Promise 也参考了 Promise/A+ 规范。</span><br></pre></td></tr></table></figure><h2 id="ES6中的Promise原理实现"><a href="#ES6中的Promise原理实现" class="headerlink" title="ES6中的Promise原理实现"></a>ES6中的<code>Promise</code>原理实现</h2><p><code>Promise</code>的用法就不多介绍了。可以去 <strong>MDN</strong>的官方文档 或者 阮一峰的ES6入门教程详情了解</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Promise principle</span></span><br><span class="line"><span class="comment">// 发布订阅</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">MyPromise</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">excutor</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">PromiseStatus</span> = <span class="string">&quot;pending&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">resolveEvent</span> = [];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">rejectEvent</span> = [];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">resolve</span> = (<span class="params">...arg</span>) =&gt; &#123;</span><br><span class="line">            <span class="comment">// Promise实例状态只能改变一次</span></span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseStatus</span> !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">PromiseStatus</span> = <span class="string">&quot;fulfilled&quot;</span>;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">resolveEvent</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span> ? <span class="title function_">item</span>(arg) : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;, <span class="number">0</span>);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">const</span> <span class="title function_">reject</span> = (<span class="params">...arg</span>) =&gt; &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">PromiseStatus</span> !== <span class="string">&quot;pending&quot;</span>) <span class="keyword">return</span>;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">PromiseStatus</span> = <span class="string">&quot;rejected&quot;</span>;</span><br><span class="line">            <span class="built_in">clearTimeout</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">                <span class="variable language_">this</span>.<span class="property">rejectEvent</span>.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span> ? <span class="title function_">item</span>(arg) : <span class="keyword">void</span> <span class="number">0</span>;</span><br><span class="line">                &#125;);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果用function定义的resolve/reject, 可以用bind定向一下this指向</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="title function_">excutor</span>(resolve, reject);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">            <span class="title function_">reject</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// prototype </span></span><br><span class="line">    <span class="title function_">then</span>(<span class="params">resolveFn, rejectFn</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> resolveFn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">            resolveFn = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">typeof</span> rejectFn !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">            rejectFn = <span class="title class_">Function</span>.<span class="property"><span class="keyword">prototype</span></span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 链式调用then，默认返回的是一个成功态的Promise实列</span></span><br><span class="line">        <span class="comment">// 如果上一个then其回调执行返回的是Promise实列，那么默认返回的状态受到其影响</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">resolveEvent</span>.<span class="title function_">push</span>(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="comment">// push 一个匿名箭头函数，异步执行的是这个匿名函数、</span></span><br><span class="line">                <span class="comment">// 通过上级作用域查找到then的回调让其执行，判断其返回值</span></span><br><span class="line">                <span class="keyword">const</span> result = <span class="title function_">resolveFn</span>(...arg);</span><br><span class="line">                result <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? result.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">rejectEvent</span>.<span class="title function_">push</span>(<span class="function">(<span class="params">arg</span>) =&gt;</span> &#123;</span><br><span class="line">                <span class="keyword">const</span> result = <span class="title function_">rejectFn</span>(...arg);</span><br><span class="line">                result <span class="keyword">instanceof</span> <span class="title class_">MyPromise</span> ? result.<span class="title function_">then</span>(resolve, reject) : <span class="title function_">resolve</span>();</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>一个简易版的<code>Promise</code>实现了，<code>Promise</code>原型上的方法还有好几个，这里只简单实现了最常用的 <code>then</code></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> mp1 = <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;Promise callback&quot;</span>);</span><br><span class="line">    <span class="title function_">resolve</span>(<span class="string">&quot;resolve ok&quot;</span>);</span><br><span class="line">    <span class="comment">// reject(&quot;reject not&quot;);</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">mp1.<span class="title function_">then</span>(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">MyPromise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="title function_">reject</span>();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;, <span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str);</span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function"><span class="params">str</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 如果上一个then回调执行时没有返回一个Promise实例，那么会默认返回一个成功态的Promise实列</span></span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(str); <span class="comment">// undefined</span></span><br><span class="line">&#125;, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;rejected callback 2&quot;</span>);  <span class="comment">// 默认成功态，这里的rejected回调不会执行</span></span><br><span class="line">&#125;).<span class="title function_">then</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;resolve callback 3&quot;</span>); <span class="comment">// 执行</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;synchronization&quot;</span>);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/ES6/Promise.then/Promise-then.png"></p><p>试了几下，完美实现~   嗝 ~~</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;简单了解一下Promise&quot;&gt;&lt;a href=&quot;#简单了解一下Promise&quot; class=&quot;headerlink&quot; title=&quot;简单了解一下Promise&quot;&gt;&lt;/a&gt;简单了解一下Promise&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;在阮一峰大神的ES6入门文章中，关于对Promise的介绍&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;Promise&lt;/code&gt; 是异步编程的一种解决方案，比传统的解决方案——回调函数和事件——更合理和更强大。它由社区最早提出和实现，ES6 将其写进了语言标准，统一了用法，原生提供了&lt;code&gt;Promise&lt;/code&gt;对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;所谓&lt;code&gt;Promise&lt;/code&gt;，简单说就是一个容器，里面保存着某个未来才会结束的事件（通常是一个异步操作）的结果。从语法上说，&lt;code&gt;Promise&lt;/code&gt; 是一个对象，从它可以获取异步操作的消息。&lt;code&gt;Promise&lt;/code&gt; 提供统一的 API，各种异步操作都可以用同样的方法进行处理。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="ES6" scheme="https://zhangone.site/tags/ES6/"/>
    
  </entry>
  
  <entry>
    <title>redux-核心原理实现</title>
    <link href="https://zhangone.site/posts/a1c455e0/"/>
    <id>https://zhangone.site/posts/a1c455e0/</id>
    <published>2020-02-14T17:29:15.000Z</published>
    <updated>2020-04-09T16:32:11.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="redux是什么"><a href="#redux是什么" class="headerlink" title="redux是什么"></a>redux是什么</h3><blockquote><p>很多人认为redux必须要结合React使用，其实并不是的，Redux 是 JavaScript 状态容器，只要你的项目中使用到了状态，并且状态十分复杂，那么你就可以使用Redux管理你的项目状态，它可以使用在react中，也可以使用中在Vue中，当然也适用其他的框架。</p></blockquote><span id="more"></span><h4 id="redux-工作原理"><a href="#redux-工作原理" class="headerlink" title="redux 工作原理"></a>redux 工作原理</h4><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/React-Redux/85eda507gy1fpkak6pk3pj20p10e1abo.jpg"></p><ol><li>首先我们找到最上面的 <strong>state</strong></li><li>在 <strong>react</strong> 中 <strong>state</strong> 决定了视图（ui），<strong>state</strong>的变化就会调用<strong>React</strong>的 <strong>render</strong>（）方法，从而改变视图</li><li>用户通过一些事件（如点击按钮，移动鼠标）就会像<strong>reducer</strong>派发一个<strong>action</strong></li><li><strong>reducer</strong>接收到<strong>action</strong>后就会去更新<strong>state</strong></li><li><strong>store</strong>是包含了所有了<strong>state</strong>，可以把他看做所有状态的集合</li></ol><blockquote><p><code>redux</code>的一些<code>api</code>及使用方法这里不再过多叙述  <strong>详情可以了解 redux 文档</strong>：<a href="https://www.redux.org.cn/">redux 中文文档</a></p></blockquote><h3 id="redux-源码剖析-丐版实现"><a href="#redux-源码剖析-丐版实现" class="headerlink" title="redux 源码剖析, 丐版实现"></a>redux 源码剖析, 丐版实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// redux : 精简源码，只写了核心原理</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">createStore</span>(<span class="params">reducer</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建store状态</span></span><br><span class="line">    <span class="keyword">let</span> state;</span><br><span class="line">    <span class="comment">// store事件池</span></span><br><span class="line">    <span class="keyword">let</span> listeners = [];</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取state状态信息</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">getState</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// redux不允许直接更改state，但是源码中又没有做相应的处理</span></span><br><span class="line">        <span class="comment">// 这里用JSON做一个简单的深克隆处理</span></span><br><span class="line">        <span class="keyword">return</span> <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(state));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 派发提交</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">dispatch</span>(<span class="params">action</span>) &#123;</span><br><span class="line">        state = <span class="title function_">reducer</span>(state, action);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 每次dispatch以后，都要发布一下事件池</span></span><br><span class="line">        listeners.<span class="title function_">forEach</span>(<span class="function"><span class="params">item</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">typeof</span> item === <span class="string">&quot;function&quot;</span>) <span class="title function_">item</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 订阅</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params">func</span>) &#123;</span><br><span class="line">        <span class="comment">// 在redux源码中并没有做事件池去重； 个人觉得要做一下去重</span></span><br><span class="line">        <span class="keyword">if</span> (!listeners.<span class="title function_">includes</span>(func)) listeners.<span class="title function_">push</span>(func);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// subscribe(): 会返回一个函数，用来从事件池中移除当前事件 (取消订阅)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">function</span> <span class="title function_">unSubscribe</span>(<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// 为防止数组塌陷问题，这里用filter替代splice移除数组项</span></span><br><span class="line">            listeners = listeners.<span class="title function_">filter</span>(<span class="function"><span class="params">item</span> =&gt;</span> item !== func);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化state，创建store时默认派发一次</span></span><br><span class="line">    <span class="title function_">dispatch</span>(&#123;</span><br><span class="line">        <span class="comment">// 初始派发的type值一定不要和项目中的type值有重复的；这里redux源码做了一个随机数截取处理转字符串所生成的一个尽可能不重复的type初始值</span></span><br><span class="line">        <span class="attr">type</span>: <span class="string">&quot;@@redux/INIT&quot;</span> + <span class="title class_">Date</span>.<span class="title function_">now</span>()  <span class="comment">// 简单操作一下，其实也可以不传type</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getState,</span><br><span class="line">        dispatch,</span><br><span class="line">        subscribe</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// combineReducers: 合并reducer</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">function</span> <span class="title function_">combineReducers</span>(<span class="params">reducers</span>) &#123;</span><br><span class="line">    <span class="comment">// 创建store初始化state。默认 = &#123;&#125;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">state = &#123;&#125;, action</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> combineState = &#123;&#125;;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> reducers) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!reducers.<span class="title function_">hasOwnProperty</span>(key)) <span class="keyword">break</span>;</span><br><span class="line">            combineState[key] = reducers[key](state[key], action);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> combineState;</span><br><span class="line">        <span class="comment">// 最终state : &#123; module1: &#123;..&#125;, module2: &#123;..&#125;, .....&#125;</span></span><br><span class="line">        <span class="comment">// 初始化创建之后，以后的每一次执行dispatch，都会让每一个组件模块下的reducer执行，且会把state中对应组件名的对应数据传入reducer   ==&gt;  reducer(state.module, action)</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里只精简写了一下<code>redux</code>核心工作原理, 还有一些<code>bindActionCreators</code>、<code>applyMiddleware</code>、<code>compose</code>…..其他的<code>api</code>后续再详情探究一下</p><p>~~嗝了</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;redux是什么&quot;&gt;&lt;a href=&quot;#redux是什么&quot; class=&quot;headerlink&quot; title=&quot;redux是什么&quot;&gt;&lt;/a&gt;redux是什么&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;很多人认为redux必须要结合React使用，其实并不是的，Redux 是 JavaScript 状态容器，只要你的项目中使用到了状态，并且状态十分复杂，那么你就可以使用Redux管理你的项目状态，它可以使用在react中，也可以使用中在Vue中，当然也适用其他的框架。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="redux" scheme="https://zhangone.site/tags/redux/"/>
    
  </entry>
  
  <entry>
    <title>VUE-component</title>
    <link href="https://zhangone.site/posts/b0880b06/"/>
    <id>https://zhangone.site/posts/b0880b06/</id>
    <published>2019-12-11T04:22:59.000Z</published>
    <updated>2019-12-11T04:22:59.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="VUE中的组件"><a href="#VUE中的组件" class="headerlink" title="VUE中的组件"></a>VUE中的组件</h2><p>组件的特点是：</p><ul><li><p>每个组件就是一个自定义标签</p></li><li><p>可复用</p></li><li><p>方便维护</p></li><li><p>方便拆分</p></li><li><p>每个组件作用域隔离（互不干扰）</p></li><li><p>有完整的生命周期</p></li><li><p>有自己的响应式数据和各种方法（事件）</p></li><li><p>…</p><span id="more"></span></li></ul><p><strong>组件的组织</strong></p><ul><li>通常一个应用会以一棵嵌套的组件树的形式来组织：<br>  <img src="https://cn.vuejs.org/images/components.png" alt="图片挂了"></li></ul><h3 id="1-全局组件-amp-组件的基本语法"><a href="#1-全局组件-amp-组件的基本语法" class="headerlink" title="1. 全局组件 &amp; 组件的基本语法"></a>1. 全局组件 &amp; 组件的基本语法</h3><blockquote><p>在任何组件中可以直接使用（不需要引入，直接在组件模板中调用即可）<br><code>Vue.component(componentName,options)</code></p></blockquote><ul><li><p>组件名字中的一点规范</p><ul><li><code>kebab-case</code>：只能<code>&lt;kebab-case&gt;</code>调用</li><li><code>PasalCase</code>：既可类似前种方式调用，也可以<code>&lt;pasalcase&gt;</code>方式调用（渲染的时候会把所有单词字母都渲染为小写，但是在组件中可以大写）</li></ul></li><li><p>调用组件的细节规范</p><ul><li>采用双闭合方式</li><li>单闭合方式不符合<code>w3c</code>规范（只能识别一个）</li></ul></li><li><p>template</p><ul><li><p>每个组件只能有一个根元素</p></li><li><p>模板字符串方式</p></li><li><p>template标记方式</p></li><li><p>slot插槽处理</p></li><li><p>基础操作</p></li><li><p>多插槽的指定</p></li><li><p>data必须是一个函数，保证不同组件之间的数据互不干扰（返回的对象中初始化数据）</p></li><li><p>…</p></li></ul></li></ul><h3 id="2-局部组件"><a href="#2-局部组件" class="headerlink" title="2. 局部组件"></a>2. 局部组件</h3><ul><li>创建组件：<code>let</code> <code>componenName=&#123;…&#125;</code></li><li>基于<code>components</code>属性声明组件：想用哪个组件需要先声明</li><li>使用组件</li></ul><h3 id="3-组件信息通讯之父传子：props属性传递"><a href="#3-组件信息通讯之父传子：props属性传递" class="headerlink" title="3. 组件信息通讯之父传子：props属性传递"></a>3. 组件信息通讯之父传子：<code>props</code>属性传递</h3><ul><li><p>父组件调用到的时候</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component aa=&#x27;AAAA&#x27; :bb=&#x27;xxx&#x27;&gt;&lt;/my-component&gt;</span><br></pre></td></tr></table></figure></li><li><p>子组件中基于<code>props</code>声明需要接收的属性值</p>  <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(&#x27;my-component&#x27;,&#123;</span><br><span class="line">   props:[&#x27;aa&#x27;,&#x27;bb&#x27;],</span><br><span class="line">   ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p><code>props</code>中声明的属性和<code>data</code>一样，是响应式数据，挂载到<code>vm</code>实例上，可控制视图渲染</p></li><li><p><code>props</code>中的一些细节问题</p><ul><li><p>命名大小写：传递的是<code>kebab-case</code>格式，<code>props</code>中获取的是<code>camelCase</code>驼峰命名</p></li><li><p>指定属性的类型：<code>props:&#123;xxx:String,…&#125;</code></p></li><li><p>指定属性的默认值：<code>props:&#123;xxx:&#123;type:String,default:’xxx’,required:true&#125;&#125;</code></p><ul><li><p><code>type</code>如果是一个数组，意为指定的多类型皆可以</p></li><li><p><code>default</code>可以是一个函数，函数返回值是默认值</p></li><li><p><code>validator</code>自定义验证规则函数：必须符合函数中指定的规则，返回<code>true/false</code></p></li></ul></li><li><p>传递的属性值默认都是字符串格式，如果想要让传递的值是<code>数字</code>、<code>布尔</code>、<code>数组</code>、<code>对象</code>等格式，我们需要使用<code>v-bind</code>处理</p></li><li><p>样式和<code>class</code>自动合并问题</p></li></ul></li></ul><h3 id="4-Vue的单向数据流"><a href="#4-Vue的单向数据流" class="headerlink" title="4. Vue的单向数据流"></a>4. Vue的单向数据流</h3><p>所有的 <code>prop</code> 都使得其父子 <code>prop</code> 之间形成了一个单向下行绑定：父级 <code>prop</code> 的更新会向下流动到子组件中，但是反过来则不行。</p><p><code>Vue</code> 的父组件和子组件生命周期钩子函数执行顺序可以归类为以下 4 部分：</p><ul><li><p>加载渲染过程：父 <code>beforeCreate </code>-&gt; 父 <code>created</code> -&gt; 父 <code>beforeMount</code> -&gt; 子 <code>beforeCreate</code> -&gt; 子 <code>created </code>-&gt; 子<code>beforeMount</code>-&gt; 子 <code>mounted</code> -&gt; 父 <code>mounted</code></p></li><li><p>子组件更新过程：父 <code>beforeUpdate</code> -&gt; 子<code>beforeUpdate</code> -&gt; 子 <code>updated</code> -&gt; 父 <code>updated</code></p></li><li><p>父组件更新过程：父 <code>beforeUpdate</code> -&gt; 父 <code>updated</code></p></li><li><p>销毁过程：父 <code>beforeDestroy</code> -&gt; 子 <code>beforeDestroy </code>-&gt; 子 <code>destroyed </code>-&gt; 父 <code>destroyed</code></p></li></ul><p>每次父级组件发生更新时，子组件中所有的<code> prop</code> 都将会刷新为最新的值。这意味着不应该在一个子组件内部改变<code> prop</code>。如果这样做了，<code>Vue</code> 会在浏览器的控制台中发出警告。子组件想修改时，只能通过 <code>$emit</code> 派发一个自定义事件，父组件接收到后，由父组件修改。有两种常见的试图改变一个 <code>prop</code> 的情形 :</p><ul><li><p>这个 <code>prop</code> 用来传递一个初始值；这个子组件接下来希望将其作为一个本地的 <code>prop</code> 数据来使用。 在这种情况下，最好定义一个本地的 <code>data</code> 属性并将这个 <code>prop</code> 用作其初始值</p></li><li><p>这个 <code>prop</code> 以一种原始的值传入且需要进行转换。 在这种情况下，最好使用这个 <code>prop</code> 的值来定义一个计算属性</p></li></ul><h3 id="5-组件信息通讯之子改父：this-emit"><a href="#5-组件信息通讯之子改父：this-emit" class="headerlink" title="5. 组件信息通讯之子改父：this.$emit"></a>5. 组件信息通讯之子改父：<code>this.$emit</code></h3><ul><li>订阅自定义事件：调用组件的时候基于属性传递一个方法 （父）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component @func=<span class="string">&#x27;xxx&#x27;</span>&gt;&lt;/my-component&gt;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Vue</span>(&#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">xxx</span>(<span class="params">value</span>)&#123;</span><br><span class="line">            <span class="comment">//=&gt; value是this.$emit时候传递的第二个参数值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li><li>通知自定义事件执行 （子）<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">xxx</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="variable language_">this</span>.$emit(<span class="string">&#x27;func&#x27;</span>,<span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>也可以基于此方法实现兄弟组件（父子组件、隔代组件）之间的信息通信<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> eventBus=<span class="keyword">new</span> <span class="title class_">Vue</span>; <span class="comment">//=&gt;创建事件总线</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//A组件</span></span><br><span class="line">eventBus.$on(<span class="string">&#x27;xxxA&#x27;</span>,<span class="variable language_">this</span>.<span class="property">func</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//B组件</span></span><br><span class="line">eventBus.$emit(<span class="string">&#x27;xxxA&#x27;</span>);</span><br></pre></td></tr></table></figure></li></ul><h3 id="6-基于ref实现父子组件信息通信"><a href="#6-基于ref实现父子组件信息通信" class="headerlink" title="6.  基于ref实现父子组件信息通信"></a>6.  基于<code>ref</code>实现父子组件信息通信</h3><ul><li><code>ref</code> 如果在普通的 <code>DOM </code>元素上使用，引用指向的就是 <code>DOM </code>元素；如果用在子组件上，引用就指向组件实例，基于此可以快速获取和操作子组件中的数据</li><li><code>$parent</code>和<code>$children</code>是获取父组件和子组件的实例，只不过<code>$children</code>是一个数组集合，需要记住组件顺序才可以</li></ul><h3 id="7-基于provide和inject实现祖先与后代的通信"><a href="#7-基于provide和inject实现祖先与后代的通信" class="headerlink" title="7.  基于provide和inject实现祖先与后代的通信"></a>7.  基于<code>provide</code>和<code>inject</code>实现祖先与后代的通信</h3><ul><li>祖先组件基于<code>provide</code>注册需要供后代组件使用的数据<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">provide</span>:&#123; <span class="comment">//=&gt;对象或者返回对象的函数都可以（属性值如果是data中的数据，则必须使用函数的方法进行处理）</span></span><br><span class="line">        <span class="attr">name</span>:<span class="string">&#x27;zhangsan&#x27;</span>,</span><br><span class="line">        <span class="attr">year</span>:<span class="number">10</span></span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li>后代组件基于<code>inject</code>声明需要使用的数据并调取使用<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">inject</span>:[<span class="string">&#x27;name&#x27;</span>],</span><br><span class="line">    <span class="attr">methods</span>:&#123;</span><br><span class="line">        <span class="title function_">func</span>(<span class="params"></span>)&#123;</span><br><span class="line">            <span class="keyword">let</span> name=<span class="variable language_">this</span>.<span class="property">name</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h2><p>Vue官方文档  &#x3D;&#x3D;&gt;  <strong><a href="https://doc.vue-js.com/v2/guide/components-registration.html">深入了解组件</a></strong></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;VUE中的组件&quot;&gt;&lt;a href=&quot;#VUE中的组件&quot; class=&quot;headerlink&quot; title=&quot;VUE中的组件&quot;&gt;&lt;/a&gt;VUE中的组件&lt;/h2&gt;&lt;p&gt;组件的特点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;每个组件就是一个自定义标签&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可复用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方便维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;方便拆分&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;每个组件作用域隔离（互不干扰）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有完整的生命周期&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;有自己的响应式数据和各种方法（事件）&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;…&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="Vue" scheme="https://zhangone.site/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>JS-贪吃蛇小游戏</title>
    <link href="https://zhangone.site/posts/ba633e46/"/>
    <id>https://zhangone.site/posts/ba633e46/</id>
    <published>2019-11-11T04:17:36.000Z</published>
    <updated>2019-11-18T23:30:31.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="设定规则需求"><a href="#设定规则需求" class="headerlink" title="设定规则需求"></a>设定规则需求</h2><ul><li>点击开始游戏</li><li>初始化一个蛇头+两个身体，默认向右移动</li><li>食物位置随机坐标，每次食物生成时的坐标不能和蛇身坐标重复</li><li>键盘四个方向键控制蛇头移动方向</li><li>撞到墙(地图边界)、撞到自己(蛇身)游戏失败</li><li>撞到食物，吃掉，蛇身加一。重新生成食物<span id="more"></span></li></ul><h2 id="ES5-构造函数模式"><a href="#ES5-构造函数模式" class="headerlink" title="ES5-构造函数模式"></a>ES5-构造函数模式</h2><blockquote><p>面向对象<code>OOP</code>：封装、继承、多态</p></blockquote><p>使用JS的ES5版本进行开发。</p><p>JS —– 面向对象思想。这个游戏主要利用到了封装。。</p><h3 id="js代码："><a href="#js代码：" class="headerlink" title="js代码："></a><strong>js代码：</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// map-size : 100 * 100 = 12 * 9  || 50 * 50 = 24 * 18</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> map = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;snakeWrap&#x27;</span>),</span><br><span class="line">    startBtn = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;start&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> snakeGame = (<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> sw = <span class="number">50</span>,</span><br><span class="line">        sh = <span class="number">50</span>,</span><br><span class="line">        row = <span class="number">1200</span> / sw,</span><br><span class="line">        col = <span class="number">900</span> / sh;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create Food</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Food</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">foodPos</span> = <span class="variable language_">this</span>.<span class="title function_">randomPos</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">foodView</span> = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="variable language_">this</span>.<span class="property">foodPos</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">foodPos</span>.<span class="property">y</span>, <span class="string">&#x27;food&#x27;</span>).<span class="title function_">create</span>();</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="title class_">Food</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">randomPos</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> foodPos;</span><br><span class="line">        <span class="keyword">var</span> include = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">while</span> (include) &#123;</span><br><span class="line">            foodPos = &#123;</span><br><span class="line">                <span class="attr">x</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * row),</span><br><span class="line">                <span class="attr">y</span>: <span class="title class_">Math</span>.<span class="title function_">floor</span>(<span class="title class_">Math</span>.<span class="title function_">random</span>() * col)</span><br><span class="line">            &#125;</span><br><span class="line">            include = snake.<span class="title function_">includePos</span>(foodPos);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="keyword">return</span> foodPos;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create div</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">CreateDiv</span>(<span class="params">x, y, name</span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">x</span> = x * sw;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">y</span> = y * sh;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">class</span> = name;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewEle</span> = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;div&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewEle</span>.<span class="property">className</span> = <span class="variable language_">this</span>.<span class="property">class</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">parent</span> = <span class="variable language_">document</span>.<span class="title function_">getElementById</span>(<span class="string">&#x27;snakeWrap&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">CreateDiv</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">create</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewEle</span>.<span class="property">style</span>.<span class="property">width</span> = sw + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewEle</span>.<span class="property">style</span>.<span class="property">height</span> = sh + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewEle</span>.<span class="property">style</span>.<span class="property">position</span> = <span class="string">&#x27;absolute&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewEle</span>.<span class="property">style</span>.<span class="property">left</span> = <span class="variable language_">this</span>.<span class="property">x</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">viewEle</span>.<span class="property">style</span>.<span class="property">top</span> = <span class="variable language_">this</span>.<span class="property">y</span> + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">parent</span>.<span class="title function_">appendChild</span>(<span class="variable language_">this</span>.<span class="property">viewEle</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title class_">CreateDiv</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">remove</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">parent</span>.<span class="title function_">removeChild</span>(<span class="variable language_">this</span>.<span class="property">viewEle</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// snake</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Snake</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">// x,y all position</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pos</span> = [</span><br><span class="line">            [<span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="comment">// direction change</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">directionStorage</span> = &#123;</span><br><span class="line">            <span class="attr">right</span>: &#123;</span><br><span class="line">                <span class="attr">x</span>: <span class="number">1</span>,</span><br><span class="line">                <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">left</span>: &#123;</span><br><span class="line">                <span class="attr">x</span>: -<span class="number">1</span>,</span><br><span class="line">                <span class="attr">y</span>: <span class="number">0</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">up</span>: &#123;</span><br><span class="line">                <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">y</span>: -<span class="number">1</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">down</span>: &#123;</span><br><span class="line">                <span class="attr">x</span>: <span class="number">0</span>,</span><br><span class="line">                <span class="attr">y</span>: <span class="number">1</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// storage view</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">snakeViewEle</span> = [];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// test next position</span></span><br><span class="line">    <span class="title class_">Snake</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">PosTesting</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!game.<span class="property">timer</span>) <span class="keyword">return</span>;</span><br><span class="line">        <span class="keyword">var</span> nextPos = &#123;</span><br><span class="line">            <span class="attr">x</span>: <span class="variable language_">this</span>.<span class="property">head</span>[<span class="number">0</span>] + <span class="variable language_">this</span>.<span class="property">direction</span>.<span class="property">x</span>,</span><br><span class="line">            <span class="attr">y</span>: <span class="variable language_">this</span>.<span class="property">head</span>[<span class="number">1</span>] + <span class="variable language_">this</span>.<span class="property">direction</span>.<span class="property">y</span></span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">// console.log(nextPos);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// test food</span></span><br><span class="line">        <span class="keyword">if</span> (nextPos.<span class="property">x</span> === <span class="variable language_">this</span>.<span class="property">curFood</span>.<span class="property">foodPos</span>.<span class="property">x</span> &amp;&amp; nextPos.<span class="property">y</span> === <span class="variable language_">this</span>.<span class="property">curFood</span>.<span class="property">foodPos</span>.<span class="property">y</span>) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="title function_">eat</span>();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// test self</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="title function_">includePos</span>(nextPos)) &#123;</span><br><span class="line">            game.<span class="title function_">gameOver</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// test boundary</span></span><br><span class="line">        <span class="keyword">if</span> (nextPos.<span class="property">x</span> &gt;= row || nextPos.<span class="property">y</span> &gt;= col || nextPos.<span class="property">x</span> &lt; <span class="number">0</span> || nextPos.<span class="property">y</span> &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            game.<span class="title function_">gameOver</span>();</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// GO</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="title function_">unshift</span>([nextPos.<span class="property">x</span>, nextPos.<span class="property">y</span>]);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">play</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// Snake start</span></span><br><span class="line">    <span class="title class_">Snake</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">play</span> = <span class="keyword">function</span> (<span class="params">eat</span>) &#123;</span><br><span class="line">        <span class="comment">// </span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">snakeViewEle</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> curView = <span class="variable language_">this</span>.<span class="property">snakeViewEle</span>[i];</span><br><span class="line">            <span class="keyword">var</span> curPos = <span class="variable language_">this</span>.<span class="property">pos</span>[i];</span><br><span class="line">            curView.<span class="property">viewEle</span>.<span class="property">style</span>.<span class="property">left</span> = curPos[<span class="number">0</span>] * sw + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">            curView.<span class="property">viewEle</span>.<span class="property">style</span>.<span class="property">top</span> = curPos[<span class="number">1</span>] * sh + <span class="string">&#x27;px&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">pos</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">if</span> (eat) &#123;</span><br><span class="line">            <span class="variable language_">this</span>.<span class="property">curFood</span> = <span class="keyword">new</span> <span class="title class_">Food</span>;</span><br><span class="line">            game.<span class="property">score</span>++;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="title function_">pop</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// eat food</span></span><br><span class="line">    <span class="title class_">Snake</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">eat</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="title function_">unshift</span>([<span class="variable language_">this</span>.<span class="property">curFood</span>.<span class="property">foodPos</span>.<span class="property">x</span>, <span class="variable language_">this</span>.<span class="property">curFood</span>.<span class="property">foodPos</span>.<span class="property">y</span>]);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">curFood</span>.<span class="property">foodView</span>.<span class="property">viewEle</span>.<span class="property">className</span> = <span class="string">&#x27;snakeBody&#x27;</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">snakeViewEle</span>.<span class="title function_">push</span>(<span class="variable language_">this</span>.<span class="property">curFood</span>.<span class="property">foodView</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">play</span>(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Snake</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">includePos</span> = <span class="keyword">function</span> (<span class="params">objPos</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> item = <span class="variable language_">this</span>.<span class="property">pos</span>[i];</span><br><span class="line">            <span class="keyword">if</span> (item[<span class="number">0</span>] === objPos.<span class="property">x</span> &amp;&amp; item[<span class="number">1</span>] === objPos.<span class="property">y</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i == <span class="variable language_">this</span>.<span class="property">pos</span>.<span class="property">length</span> - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title class_">Snake</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="comment">// init snake</span></span><br><span class="line">        <span class="keyword">var</span> head = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="variable language_">this</span>.<span class="property">pos</span>[<span class="number">0</span>][<span class="number">0</span>], <span class="variable language_">this</span>.<span class="property">pos</span>[<span class="number">0</span>][<span class="number">1</span>], <span class="string">&#x27;snakeHead&#x27;</span>).<span class="title function_">create</span>(),</span><br><span class="line">            body1 = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="variable language_">this</span>.<span class="property">pos</span>[<span class="number">1</span>][<span class="number">0</span>], <span class="variable language_">this</span>.<span class="property">pos</span>[<span class="number">0</span>][<span class="number">1</span>], <span class="string">&#x27;snakeBody&#x27;</span>).<span class="title function_">create</span>(),</span><br><span class="line">            body2 = <span class="keyword">new</span> <span class="title class_">CreateDiv</span>(<span class="variable language_">this</span>.<span class="property">pos</span>[<span class="number">2</span>][<span class="number">0</span>], <span class="variable language_">this</span>.<span class="property">pos</span>[<span class="number">0</span>][<span class="number">1</span>], <span class="string">&#x27;snakeBody&#x27;</span>).<span class="title function_">create</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// init food &amp;&amp; storage position</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">curFood</span> = <span class="keyword">new</span> <span class="title class_">Food</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// init direction</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">direction</span> = <span class="variable language_">this</span>.<span class="property">directionStorage</span>.<span class="property">right</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// pos relation</span></span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">head</span> = <span class="variable language_">this</span>.<span class="property">pos</span>[<span class="number">0</span>];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">snakeViewEle</span>.<span class="title function_">push</span>(head, body1, body2);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// control direction</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">control</span>(<span class="params">e</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">37</span> &amp;&amp; snake.<span class="property">direction</span> !== snake.<span class="property">directionStorage</span>.<span class="property">right</span>) &#123;</span><br><span class="line">            snake.<span class="property">direction</span> = snake.<span class="property">directionStorage</span>.<span class="property">left</span>;</span><br><span class="line">            game.<span class="title function_">snakeTurnHead</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">38</span> &amp;&amp; snake.<span class="property">direction</span> !== snake.<span class="property">directionStorage</span>.<span class="property">down</span>) &#123;</span><br><span class="line">            snake.<span class="property">direction</span> = snake.<span class="property">directionStorage</span>.<span class="property">up</span>;</span><br><span class="line">            game.<span class="title function_">snakeTurnHead</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">39</span> &amp;&amp; snake.<span class="property">direction</span> !== snake.<span class="property">directionStorage</span>.<span class="property">left</span>) &#123;</span><br><span class="line">            snake.<span class="property">direction</span> = snake.<span class="property">directionStorage</span>.<span class="property">right</span>;</span><br><span class="line">            game.<span class="title function_">snakeTurnHead</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (e.<span class="property">keyCode</span> === <span class="number">40</span> &amp;&amp; snake.<span class="property">direction</span> !== snake.<span class="property">directionStorage</span>.<span class="property">up</span>) &#123;</span><br><span class="line">            snake.<span class="property">direction</span> = snake.<span class="property">directionStorage</span>.<span class="property">down</span>;</span><br><span class="line">            game.<span class="title function_">snakeTurnHead</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// define game</span></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">Game</span>(<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">null</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// reset map</span></span><br><span class="line">    <span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">gameOver</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;得分 : &quot;</span> + <span class="variable language_">this</span>.<span class="property">score</span>);</span><br><span class="line">        <span class="comment">// remove onkeydown</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, control, <span class="literal">false</span>);</span><br><span class="line">        startBtn.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&quot;block&quot;</span>;</span><br><span class="line">        snake.<span class="property">snakeViewEle</span> = [];</span><br><span class="line">        map.<span class="property">innerHTML</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        snake.<span class="property">pos</span> = [</span><br><span class="line">            [<span class="number">2</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">1</span>, <span class="number">0</span>],</span><br><span class="line">            [<span class="number">0</span>, <span class="number">0</span>]</span><br><span class="line">        ];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">score</span> = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// turn direction</span></span><br><span class="line">    <span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">snakeTurnHead</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">stop</span>();</span><br><span class="line">        snake.<span class="title class_">PosTesting</span>() &amp;&amp; <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// stop</span></span><br><span class="line">    <span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">stop</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// start</span></span><br><span class="line">    <span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">start</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">timer</span> = <span class="built_in">setInterval</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">            <span class="comment">// PosTest &amp;&amp; play</span></span><br><span class="line">            snake.<span class="title class_">PosTesting</span>();</span><br><span class="line">        &#125;, <span class="number">250</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// init game</span></span><br><span class="line">    <span class="title class_">Game</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">init</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">        <span class="built_in">clearInterval</span>(<span class="variable language_">this</span>.<span class="property">timer</span>);</span><br><span class="line">        snake.<span class="title function_">init</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="title function_">start</span>();</span><br><span class="line">        <span class="comment">// monitor onkeydown</span></span><br><span class="line">        <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">addEventListener</span>(<span class="string">&#x27;keydown&#x27;</span>, control, <span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// create example</span></span><br><span class="line">    <span class="keyword">var</span> snake = <span class="keyword">new</span> <span class="title class_">Snake</span>;</span><br><span class="line">    <span class="keyword">var</span> game = <span class="keyword">new</span> <span class="title class_">Game</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// return example</span></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        snake,</span><br><span class="line">        game</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// End</span></span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="comment">// start game</span></span><br><span class="line">startBtn.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">    <span class="variable language_">this</span>.<span class="property">parentNode</span>.<span class="property">style</span>.<span class="property">display</span> = <span class="string">&#x27;none&#x27;</span>;</span><br><span class="line">    snakeGame.<span class="property">game</span>.<span class="title function_">init</span>();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="css代码："><a href="#css代码：" class="headerlink" title="css代码："></a>css代码：</h3><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">*&#123;<span class="attribute">margin</span>: <span class="number">0</span>; <span class="attribute">padding</span>: <span class="number">0</span>;&#125;</span><br><span class="line"><span class="selector-tag">body</span>&#123;<span class="attribute">background-color</span>: <span class="number">#f3f3f3</span>;&#125;</span><br><span class="line"><span class="selector-class">.content</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">10px</span> <span class="number">0</span> <span class="number">0</span> <span class="number">10px</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* btn */</span></span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.btn</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">255</span>, <span class="number">255</span>, <span class="number">255</span>, .<span class="number">3</span>);</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">display</span>: none;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.btn</span><span class="selector-pseudo">:last-child</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.content</span> <span class="selector-class">.btn</span> <span class="selector-tag">button</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">120px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">80px</span>;</span><br><span class="line">    <span class="attribute">font-size</span>: <span class="number">42px</span>;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">35%</span> auto;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 12 * 9 */</span></span><br><span class="line"><span class="comment">/* snakeWrap */</span></span><br><span class="line"><span class="selector-id">#snakeWrap</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">900px</span>;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#000</span>;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">top</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#snakeWrap</span> <span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* snake style */</span></span><br><span class="line"><span class="selector-id">#snakeWrap</span> <span class="selector-class">.snakeHead</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#snakeWrap</span> <span class="selector-class">.snakeBody</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#e0de43</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-id">#snakeWrap</span> <span class="selector-class">.food</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="html代码"><a href="#html代码" class="headerlink" title="html代码"></a>html代码</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>snake<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./snake.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;content&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;snakeWrap&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;btn&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">&quot;start&quot;</span>&gt;</span>开始<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./snake.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span>     </span><br></pre></td></tr></table></figure><h2 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h2><p>游戏效果图：<br><img src="https://cdn.zhangone.site/PhotoBed/img/blog/JS/GluttonousSnake/snake.png" alt="游戏效果图"></p><p>大概实现的差不多了。 </p><p>但还有一些地方可以优化一下，例如蛇的移动方式，上面采用的是循环坐标，让蛇身挨个前进。这样的方式不免有些 ‘笨重’。随蛇身越来越长，代码性能不高。</p><p>可以采用的优化方式：利用 ‘掐头去尾’ 实现移动动作。即在撞到食物时，删除食物，且新建一个蛇头，坐标为食物的坐标。 随之删除蛇身尾部，新建一个蛇身 ，覆盖旧蛇头的位置。  这样每次撞到食物只需操作蛇头和蛇尾就可以了。 </p><p>先不优化了，睡了睡了~</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;设定规则需求&quot;&gt;&lt;a href=&quot;#设定规则需求&quot; class=&quot;headerlink&quot; title=&quot;设定规则需求&quot;&gt;&lt;/a&gt;设定规则需求&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;点击开始游戏&lt;/li&gt;
&lt;li&gt;初始化一个蛇头+两个身体，默认向右移动&lt;/li&gt;
&lt;li&gt;食物位置随机坐标，每次食物生成时的坐标不能和蛇身坐标重复&lt;/li&gt;
&lt;li&gt;键盘四个方向键控制蛇头移动方向&lt;/li&gt;
&lt;li&gt;撞到墙(地图边界)、撞到自己(蛇身)游戏失败&lt;/li&gt;
&lt;li&gt;撞到食物，吃掉，蛇身加一。重新生成食物</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://zhangone.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS-发布订阅模式</title>
    <link href="https://zhangone.site/posts/fc4d7eca/"/>
    <id>https://zhangone.site/posts/fc4d7eca/</id>
    <published>2019-10-09T18:23:46.000Z</published>
    <updated>2020-04-13T17:33:26.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="了解设计模式"><a href="#了解设计模式" class="headerlink" title="了解设计模式"></a>了解设计模式</h3><ol><li><strong>背景</strong><blockquote><p>设计模式并非是软件开发的专业术语，实际上，“模式”最早诞生于建筑学。</p><p>设计模式的定义是：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案。通俗一点说，设计模式是在某种场合下对某个问题的一种解决方案。如果再通俗一点说，设计模式就是给面向对象软件开发中的一些好的设计取个名字。</p><p>这些“好的设计”并不是谁发明的，而是早已存在于软件开发中。一个稍有经验的程序员也许在不知不觉中数次使用过这些设计模式。GoF（Gang of Four–四人组，《设计模式》几位作者）最大的功绩是把这些“好的设计”从浩瀚的面向对象世界中挑选出来，并且给予它们一个好听又好记的名字。</p><p>设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案，他不是一个死的机制，他是一种思想，一种写代码的形式。每种语言对于各种设计模式都有他们自己的实现方式，对于某些设计模式来说，可能在某些语言下并不适用，比如工厂方法模式对于javascript。模式应该用在正确的地方。而哪些才算正确的地方，只有在我们深刻理解了模式的意图之后，再结合项目的实际场景才会知道。。</p><p>模式的社区一直在发展。GoF在1995年提出了23种设计模式，但模式不仅仅局限于这23种，后面增加到了24种。在这20多年的时间里，也许有更多的模式已经被人发现并总结了出来，比如一些JavaScript 图书中会提到模块模式、沙箱模式等。这些“模式”能否被世人公认并流传下来，还有待时间验证。</p><p>背景介绍摘自文章 <a href="https://blog.csdn.net/hf872914334/article/details/88899326">发布订阅模式与观察者模式</a> 有介绍这两种模式的区别</p></blockquote></li></ol><p>所有的设计模式都是一种思想：优化代码也业务逻辑的 </p><span id="more"></span><blockquote><p><strong>[发布订阅设计模式 &#x3D;&gt; 观察者模式的升级版]</strong></p></blockquote><p>情景再现：当某一个时间点或者某个条件到达的时候，我们需要处理很多事情，例如，我们从服务器获取数据（一般是异步获取），需要后续处理很多的事情</p><ol start="2"><li><p><strong>观察者模式（Observer Pattern）</strong></p><blockquote><p>观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知，并自动更新。观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯。</p><p>观察者模式有一个别名叫“发布-订阅模式”，或者说是“订阅-发布模式”，订阅者和订阅目标是联系在一起的，当订阅目标发生改变时，逐个通知订阅者。我们可以用报纸期刊的订阅来形象的说明，当你订阅了一份报纸，每天都会有一份最新的报纸送到你手上，有多少人订阅报纸，报社就会发多少份报纸，报社和订报纸的客户就是上面文章开头所说的“一对多”的依赖关系</p></blockquote></li><li><p><strong>发布订阅模式（Pub-Sub Pattern）</strong></p><blockquote><p>其实24种基本的设计模式中并没有发布订阅模式，上面也说了，他只是观察者模式的一个别称或者说是升级版。</p><p>但是经过时间的沉淀，似乎他已经强大了起来，已经独立于观察者模式，成为另外一种不同的设计模式。</p><p>在现在的发布订阅模式中，称为发布者的消息发送者不会将消息直接发送给订阅者，这意味着发布者和订阅者不知道彼此的存在。在发布者和订阅者之间存在第三个组件，称为消息代理或调度中心或中间件，它维持着发布者和订阅者之间的联系，过滤所有发布者传入的消息并相应地分发它们给订阅者。</p><p>举一个例子，你在微博上关注了A，同时其他很多人也关注了A，那么当A发布动态的时候，微博就会为你们推送这条动态。A就是发布者，你是订阅者，微博就是调度中心，你和A是没有直接的消息往来的，全是通过微博来协调的（你的关注，A的发布动态）。</p></blockquote></li></ol><h3 id="发布订阅模式的实现"><a href="#发布订阅模式的实现" class="headerlink" title="发布订阅模式的实现"></a>发布订阅模式的实现</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 封装发布订阅库 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line">(<span class="keyword">function</span> <span class="title function_">anonymous</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Sub</span> &#123;</span><br><span class="line"><span class="comment">// 创建一个事件池，并且挂载到实例上</span></span><br><span class="line">pond = &#123;&#125;;</span><br><span class="line"><span class="comment">// 向事件池中追加方法</span></span><br><span class="line"><span class="title function_">on</span>(<span class="params">flag, func</span>) &#123;</span><br><span class="line"><span class="comment">// 首先校验新增的标识是否存在事件池中（不存在，我们创建一个这样的标识，并且初始值是一个空的数组，用来存储后续增加的方法；如果存在就拿到现有的数组）</span></span><br><span class="line"><span class="keyword">let</span> pond = <span class="variable language_">this</span>.<span class="property">pond</span>;</span><br><span class="line"><span class="keyword">if</span> (!pond.<span class="title function_">hasOwnProperty</span>(flag)) &#123;</span><br><span class="line">pond[flag] = [];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> arr = pond[flag];</span><br><span class="line"><span class="comment">//每次增加之前做一个去重</span></span><br><span class="line"><span class="keyword">if</span> (!arr.<span class="title function_">includes</span>(func)) &#123;</span><br><span class="line">arr.<span class="title function_">push</span>(func);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从事件池中移除方法</span></span><br><span class="line"><span class="title function_">off</span>(<span class="params">flag, func</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> pond = <span class="variable language_">this</span>.<span class="property">pond</span>;</span><br><span class="line"><span class="keyword">let</span> arr = pond[flag];</span><br><span class="line"><span class="comment">// 如果移除的标识不在事件池中，说明之前从没有设置过这个标识的方法，也就不需要再移除了</span></span><br><span class="line"><span class="keyword">if</span> (!arr) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="comment">// 增加的时候是去重的，所以移除的时候，只需要移除一个就够了</span></span><br><span class="line"><span class="keyword">if</span> (arr[i] === func) &#123;</span><br><span class="line"><span class="comment">// 为了防止数据塌陷，我们删除的时候，不去改变原生数组的索引，我们把当前项先赋值为null即可</span></span><br><span class="line"><span class="comment">// arr.splice(i, 1);</span></span><br><span class="line">arr[i] = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 通知事件池中的方法执行</span></span><br><span class="line"><span class="title function_">fire</span>(<span class="params">flag, ...params</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> arr = <span class="variable language_">this</span>.<span class="property">pond</span>[flag];</span><br><span class="line"><span class="keyword">if</span> (!arr) <span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.<span class="property">length</span>; i++) &#123;</span><br><span class="line"><span class="keyword">let</span> item = arr[i];</span><br><span class="line"><span class="comment">// 把当前项不是函数的，从数组中移除掉即可</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">typeof</span> item !== <span class="string">&quot;function&quot;</span>) &#123;</span><br><span class="line">arr.<span class="title function_">splice</span>(i, <span class="number">1</span>);</span><br><span class="line">i--;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">item.<span class="title function_">call</span>(<span class="variable language_">this</span>, ...params);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 放到全局</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">subscribe</span> = <span class="keyword">function</span> <span class="title function_">subscribe</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Sub</span>();</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="测试效果"><a href="#测试效果" class="headerlink" title="测试效果"></a><strong>测试效果</strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">&quot;js/subscribe.js&quot;</span>&gt;&lt;/script&gt; </span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="language-javascript"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">fn1</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">1</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">fn2</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">2</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 第一次通知MARRY执行，执行到FN2的时候，我们从事件池中移除 FN1/FN2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">off</span>(<span class="string">&#x27;marry&#x27;</span>, fn1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">off</span>(<span class="string">&#x27;marry&#x27;</span>, fn2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">fn3</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">3</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">function</span> <span class="title function_">fn4</span>(<span class="params"></span>) &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="number">4</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> sub = <span class="title function_">subscribe</span>();   <span class="comment">// =&gt; 得到实例</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">on</span>(<span class="string">&#x27;marry&#x27;</span>, fn1);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">on</span>(<span class="string">&#x27;marry&#x27;</span>, fn2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">on</span>(<span class="string">&#x27;marry&#x27;</span>, fn3);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">on</span>(<span class="string">&#x27;marry&#x27;</span>, fn4);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">on</span>(<span class="string">&#x27;divorce&#x27;</span>, fn2);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">on</span>(<span class="string">&#x27;divorce&#x27;</span>, fn3);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// =&gt; 订阅完成</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> i = <span class="number">0</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">let</span> timer = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">i++;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">if</span> (i &gt; <span class="number">2</span>) &#123;    <span class="comment">// =&gt; </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"> <span class="built_in">clearInterval</span>(timer);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="keyword">return</span>;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// 发布执行</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">sub.<span class="title function_">fire</span>(<span class="string">&#x27;marry&#x27;</span>, <span class="number">10</span>, <span class="number">20</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// =&gt; 每隔两秒发布一次 &#x27;marry&#x27;事件池里的函数，这里一共执行了两次</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// =&gt; 第一次控制台等待两秒后输出 1 2 3 4  ， 在fn2执行时移除了 &#x27;marry&#x27;事件池中的 fn1 和 fn2</span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"><span class="comment">// =&gt; 再两秒后第二轮发布控制台输出  3  4   </span></span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml">&#125;, <span class="number">2000</span>);</span></span></span><br><span class="line"><span class="language-javascript"><span class="language-xml"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p>~~困了。睡觉</p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;了解设计模式&quot;&gt;&lt;a href=&quot;#了解设计模式&quot; class=&quot;headerlink&quot; title=&quot;了解设计模式&quot;&gt;&lt;/a&gt;了解设计模式&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;blockquote&gt;
&lt;p&gt;设计模式并非是软件开发的专业术语，实际上，“模式”最早诞生于建筑学。&lt;/p&gt;
&lt;p&gt;设计模式的定义是：在面向对象软件设计过程中针对特定问题的简洁而优雅的解决方案。通俗一点说，设计模式是在某种场合下对某个问题的一种解决方案。如果再通俗一点说，设计模式就是给面向对象软件开发中的一些好的设计取个名字。&lt;/p&gt;
&lt;p&gt;这些“好的设计”并不是谁发明的，而是早已存在于软件开发中。一个稍有经验的程序员也许在不知不觉中数次使用过这些设计模式。GoF（Gang of Four–四人组，《设计模式》几位作者）最大的功绩是把这些“好的设计”从浩瀚的面向对象世界中挑选出来，并且给予它们一个好听又好记的名字。&lt;/p&gt;
&lt;p&gt;设计模式并不直接用来完成代码的编写，而是描述在各种不同情况下，要怎么解决问题的一种方案，他不是一个死的机制，他是一种思想，一种写代码的形式。每种语言对于各种设计模式都有他们自己的实现方式，对于某些设计模式来说，可能在某些语言下并不适用，比如工厂方法模式对于javascript。模式应该用在正确的地方。而哪些才算正确的地方，只有在我们深刻理解了模式的意图之后，再结合项目的实际场景才会知道。。&lt;/p&gt;
&lt;p&gt;模式的社区一直在发展。GoF在1995年提出了23种设计模式，但模式不仅仅局限于这23种，后面增加到了24种。在这20多年的时间里，也许有更多的模式已经被人发现并总结了出来，比如一些JavaScript 图书中会提到模块模式、沙箱模式等。这些“模式”能否被世人公认并流传下来，还有待时间验证。&lt;/p&gt;
&lt;p&gt;背景介绍摘自文章 &lt;a href=&quot;https://blog.csdn.net/hf872914334/article/details/88899326&quot;&gt;发布订阅模式与观察者模式&lt;/a&gt; 有介绍这两种模式的区别&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;所有的设计模式都是一种思想：优化代码也业务逻辑的 &lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://zhangone.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS-函数防抖(debounce)和节流(throttling)</title>
    <link href="https://zhangone.site/posts/fd252af5/"/>
    <id>https://zhangone.site/posts/fd252af5/</id>
    <published>2019-09-06T13:26:55.000Z</published>
    <updated>2020-01-02T15:12:23.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="防抖（debounce）和-节流（throttling）"><a href="#防抖（debounce）和-节流（throttling）" class="headerlink" title="防抖（debounce）和 节流（throttling）"></a>防抖（debounce）和 节流（throttling）</h3><ol><li><p><strong>防抖和节流出现的原因</strong><br> 防抖和节流是针对响应跟不上触发频率这类问题的两种解决方案。</p><ul><li>在给<code>DOM</code>绑定事件时，有些事件我们是无法控制触发频率的。 如鼠标移动事件<code>onmousemove</code>, 滚动滚动条事件<code>onscroll</code>，窗口大小改变事件<code>onresize</code>，瞬间的操作都会导致这些事件会被高频触发。 如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。</li><li>在实时检查输入时，如果我们绑定<code>onkeyup</code>事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发。</li><li>…. <span id="more"></span></li></ul></li><li><p><strong>实现防抖</strong></p><p> 防抖和节流的作用都是防止函数多次调用。区别在于，假设一个用户一直触发这个函数，且每次触发函数的间隔小于wait，防抖的情况下只会调用一次，而节流的 情况会每隔一定时间（参数wait）调用函数。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * debounce:函数防抖</span></span><br><span class="line"><span class="comment"> *   @params</span></span><br><span class="line"><span class="comment"> *      func:要执行的函数</span></span><br><span class="line"><span class="comment"> *      wait:间隔等待时间</span></span><br><span class="line"><span class="comment"> *      immediate:在开始边界还是结束边界触发执行(true =&gt; 在开始边界)</span></span><br><span class="line"><span class="comment"> *   @return</span></span><br><span class="line"><span class="comment"> *      可被调用的函数</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">func, wait, immediate</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> result = <span class="literal">null</span>,</span><br><span class="line">timeout = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> context = <span class="variable language_">this</span>,</span><br><span class="line">now = immediate &amp;&amp; !timeout;</span><br><span class="line"><span class="built_in">clearTimeout</span>(timeout); <span class="comment">// 重要：在设置新的定时器之前，我们要把之前设置的定时器都干掉，因为防抖的目的是等待时间内，只执行一次</span></span><br><span class="line">timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">timeout = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (!immediate) result = func.<span class="title function_">call</span>(context, ...args);</span><br><span class="line">&#125;, wait);</span><br><span class="line"><span class="keyword">if</span> (now) result = func.<span class="title function_">call</span>(context, ...args);</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>实现节流</p><p> 防抖动和节流本质是不一样的。防抖动是将多次执行变为最后一次执行，节流是将多次执行变成每隔一段时间执行。</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * throttle：函数节流是为了缩减执行频率，当达到了一定的时间间隔就会执行一次</span></span><br><span class="line"><span class="comment"> *   @params</span></span><br><span class="line"><span class="comment"> *      func:需要执行的函数</span></span><br><span class="line"><span class="comment"> *      wait:设置的间隔时间</span></span><br><span class="line"><span class="comment"> *   @return</span></span><br><span class="line"><span class="comment"> *      返回可被调用的函数</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">let</span> throttle = <span class="keyword">function</span> (<span class="params">func, wait</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> timeout = <span class="literal">null</span>,</span><br><span class="line">result = <span class="literal">null</span>,</span><br><span class="line">previous = <span class="number">0</span>; <span class="comment">// 上次执行时间点</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">...args</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> now = <span class="keyword">new</span> <span class="title class_">Date</span>,</span><br><span class="line">context = <span class="variable language_">this</span>;</span><br><span class="line"><span class="comment">// remaining小于等于0，表示上次执行至此所间隔时间已经超过一个时间间隔</span></span><br><span class="line"><span class="keyword">let</span> remaining = wait - (now - previous);</span><br><span class="line"><span class="keyword">if</span> (remaining &lt;= <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">clearTimeout</span>(timeout);</span><br><span class="line">previous = now;</span><br><span class="line">timeout = <span class="literal">null</span>;</span><br><span class="line">result = func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (!timeout) &#123;</span><br><span class="line">timeout = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">previous = <span class="keyword">new</span> <span class="title class_">Date</span>;</span><br><span class="line">timeout = <span class="literal">null</span>;</span><br><span class="line">result = func.<span class="title function_">apply</span>(context, args);</span><br><span class="line">&#125;, remaining);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;防抖（debounce）和-节流（throttling）&quot;&gt;&lt;a href=&quot;#防抖（debounce）和-节流（throttling）&quot; class=&quot;headerlink&quot; title=&quot;防抖（debounce）和 节流（throttling）&quot;&gt;&lt;/a&gt;防抖（debounce）和 节流（throttling）&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;防抖和节流出现的原因&lt;/strong&gt;&lt;br&gt; 防抖和节流是针对响应跟不上触发频率这类问题的两种解决方案。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在给&lt;code&gt;DOM&lt;/code&gt;绑定事件时，有些事件我们是无法控制触发频率的。 如鼠标移动事件&lt;code&gt;onmousemove&lt;/code&gt;, 滚动滚动条事件&lt;code&gt;onscroll&lt;/code&gt;，窗口大小改变事件&lt;code&gt;onresize&lt;/code&gt;，瞬间的操作都会导致这些事件会被高频触发。 如果事件的回调函数较为复杂，就会导致响应跟不上触发，出现页面卡顿，假死现象。&lt;/li&gt;
&lt;li&gt;在实时检查输入时，如果我们绑定&lt;code&gt;onkeyup&lt;/code&gt;事件发请求去服务端检查，用户输入过程中，事件的触发频率也会很高，会导致大量的请求发出，响应速度会大大跟不上触发。&lt;/li&gt;
&lt;li&gt;….</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://zhangone.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS-深浅拷贝</title>
    <link href="https://zhangone.site/posts/474f02db/"/>
    <id>https://zhangone.site/posts/474f02db/</id>
    <published>2019-07-31T16:32:43.000Z</published>
    <updated>2019-08-13T17:22:49.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="JS中数据类型的简单介绍"><a href="#JS中数据类型的简单介绍" class="headerlink" title="JS中数据类型的简单介绍"></a>JS中数据类型的简单介绍</h2><p>在JS中，数据类型分为基本数据类型和引用数据类型两种，对于基本数据类型来说，它的值直接存储在栈内存中，而对于引用类型来说，它在栈内存中仅仅存储了一个引用，而真正的数据存储在堆内存中</p><span id="more"></span><p>当我们对数据进行操作的时候，会发生两种情况</p><ol><li><p><strong>基本数据类型</strong>：</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">let</span> b = a;</span><br><span class="line">b = <span class="number">5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(a);  <span class="comment">// 3</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(b);  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p> 可以直观的看到对于基本数据类型来说，变量 <strong>a</strong> 和变量 <strong>b</strong> 各自为值，变量 <strong>b</strong> 的值改变不会影响变量 <strong>a</strong> 的值。</p></li><li><p><strong>引用数据类型</strong> :</p> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj1 = &#123;</span><br><span class="line">    <span class="attr">a</span>:  <span class="number">1</span>,</span><br><span class="line">    <span class="attr">b</span>:  <span class="number">2</span>,</span><br><span class="line">    <span class="attr">c</span>:  <span class="number">3</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> obj2 = obj1;</span><br><span class="line">obj2.<span class="property">a</span> = <span class="number">5</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj1.<span class="property">a</span>);  <span class="comment">// 5</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj2.<span class="property">a</span>);  <span class="comment">// 5</span></span><br></pre></td></tr></table></figure><p> 可以看到的是，两个对象的值全部被修改了<br> 对象是引用类型的值，对于引用类型来说，我们将 <code>obj1</code> 赋予 <code>obj2</code> 的时候，我们其实仅仅只是将 <code>obj1</code> 存储在栈堆中的的引用赋予了 <code>obj2</code> ，而两个对象此时指向的是在堆内存中的同一个数据，所以当我们修改任意一个值的时候，修改的都是堆内存中的数据，而不是引用，所以只要修改了，同样引用的对象的值也自然而然的发生了改变</p></li></ol><p> <strong>上面的两个例子只是正常的赋值操作</strong></p><h2 id="浅拷贝"><a href="#浅拷贝" class="headerlink" title="浅拷贝"></a>浅拷贝</h2><ul><li><p>仅仅是复制了对象中最外层键值对，对于深层次的属性，如果存储的值是也是引用类型的, 彼此之间修改的操作会互相影响</p></li><li><p>实现浅拷贝的方法有多种，例如：</p><ul><li>数组的浅拷贝：Array.slice  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> log = <span class="variable language_">console</span>.<span class="property">log</span>;</span><br><span class="line"><span class="keyword">let</span> ary = [<span class="number">1</span>, [<span class="number">2</span>, [<span class="number">3</span>]]];</span><br><span class="line"><span class="keyword">let</span> newAry = ary.<span class="title function_">slice</span>();</span><br><span class="line"></span><br><span class="line">newAry[<span class="number">0</span>] = <span class="string">&quot;A&quot;</span>;        <span class="comment">// 更改第一层的数组成员</span></span><br><span class="line">newAry[<span class="number">1</span>][<span class="number">0</span>] = <span class="string">&quot;B&quot;</span>;     <span class="comment">// 更改第二层的成员</span></span><br><span class="line"><span class="title function_">log</span>(ary);               <span class="comment">// [1,[&quot;B&quot;,[3]]]</span></span><br><span class="line"><span class="title function_">log</span>(newAry);            <span class="comment">// [&quot;A&quot;,[&quot;B&quot;,[3]]]</span></span><br></pre></td></tr></table></figure></li><li>对象的浅拷贝：Object.assign</li></ul>  <figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;AA&quot;</span>,<span class="attr">child</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;BB&quot;</span>,<span class="attr">child</span>:&#123;<span class="attr">name</span>: <span class="string">&quot;CC&quot;</span>&#125;&#125;&#125;;</span><br><span class="line"><span class="keyword">let</span> newObj = <span class="title class_">Object</span>.<span class="title function_">assign</span>(&#123;&#125;, obj);</span><br><span class="line">newObj.<span class="property">name</span> = <span class="string">&quot;DD&quot;</span>;</span><br><span class="line">newObj.<span class="property">child</span>.<span class="property">name</span> = <span class="string">&quot;EE&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">log</span>(obj);       <span class="comment">// &#123;name:&quot;AA&quot;,child:&#123;name:&quot;EE&quot;,child:&#123;name:&quot;CC&quot;&#125;&#125;&#125;</span></span><br><span class="line"><span class="title function_">log</span>(newObj);    <span class="comment">// &#123;name:&quot;DD&quot;,child:&#123;name:&quot;EE&quot;,child:&#123;name:&quot;CC&quot;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="深拷贝"><a href="#深拷贝" class="headerlink" title="深拷贝"></a>深拷贝</h2><p>在实际的开发中，肯定不能让每个对象的值都指向同一个堆内存，这样的话不便于我们做操作，所以自然而然的诞生了深拷贝</p><p><strong>深拷贝作用在引用类型上！例如：Object，Array</strong><br><strong>深拷贝不会拷贝引用类型的引用，而是将引用类型的值全部拷贝一份，形成一个新的引用类型，这样就不会发生引用错乱的问题，使得我们可以多次使用同样的数据，而不用担心数据之间会起冲突</strong></p><ol><li><p><strong>先看一下利用<code>JSON</code>对象中的方法来实现的深拷贝</strong>： <em><code>JSON.stringify()</code>以及<code>JSON.parse()</code></em></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">name</span>:<span class="string">&quot;AA&quot;</span>,<span class="attr">child</span>:&#123;<span class="attr">name</span>:<span class="string">&quot;BB&quot;</span>,<span class="attr">child</span>:&#123;<span class="attr">name</span>: <span class="string">&quot;CC&quot;</span>&#125;&#125;&#125;;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">let</span> deepObj = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(obj));</span><br><span class="line">   deepObj.<span class="property">name</span> = <span class="string">&quot;DD&quot;</span>;</span><br><span class="line">   deepObj.<span class="property">child</span>.<span class="property">child</span>.<span class="property">name</span> = <span class="string">&quot;XX&quot;</span>;</span><br><span class="line"></span><br><span class="line">   <span class="title function_">log</span>(obj);           <span class="comment">// &#123;name:&quot;AA&quot;,child:&#123;name:&quot;BB&quot;,child:&#123;name:&quot;CC&quot;&#125;&#125;&#125;</span></span><br><span class="line">   <span class="title function_">log</span>(deepObj);       <span class="comment">// &#123;name:&quot;DD&quot;,child:&#123;name:&quot;BB&quot;,child:&#123;name:&quot;XX&quot;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>可以看到没有发生引用问题，修改<code>deepObj</code>的数据，并不会对<code>obj</code>造成任何影响<br>但是使用<code>JSON.stringify()</code>以及<code>JSON.parse()</code>它是不可以拷贝 <code>undefined</code>、<code> function</code>、<code>RegExp</code>等等类型的；且对于<code>Date实例</code>在拷贝后的新对象中自动把实例对象转成了字符串</p></li><li><p><strong>写一个深拷贝的方法，利用函数递归来解决深拷贝</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> obj = [</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;AA&quot;</span>, <span class="attr">age</span>: <span class="literal">undefined</span>, <span class="attr">arr</span>: [&#123;<span class="attr">reg</span>: <span class="regexp">/^\d+$/g</span>&#125;]&#125;,</span><br><span class="line">  &#123;<span class="attr">name</span>: <span class="string">&quot;BB&quot;</span>, <span class="attr">age</span>: <span class="keyword">function</span>(<span class="params"></span>)&#123;&#125;, <span class="attr">arr</span>: [&#123;<span class="attr">time</span>: <span class="keyword">new</span> <span class="title class_">Date</span>()&#125;]&#125;,</span><br><span class="line">  &#123;<span class="attr">count</span>: <span class="number">666</span>&#125;,</span><br><span class="line">  <span class="number">1</span>,</span><br><span class="line">  <span class="number">2</span>,</span><br><span class="line">  <span class="number">3</span></span><br><span class="line">];</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deepClone</span>(<span class="params">target</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> result;</span><br><span class="line"><span class="keyword">let</span> targetType = &#123;&#125;.<span class="property">toString</span>.<span class="title function_">call</span>(target);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (targetType === <span class="string">&quot;[object Object]&quot;</span> || targetType === <span class="string">&quot;[object Array]&quot;</span>) &#123;</span><br><span class="line">targetType = <span class="title class_">Array</span>.<span class="title function_">isArray</span>(target);</span><br><span class="line">result = targetType ? [] : &#123;&#125;;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> key <span class="keyword">in</span> target) &#123;</span><br><span class="line">targetType ? result.<span class="title function_">push</span>(<span class="title function_">deepClone</span>(target[key])) : (result[key] = <span class="title function_">deepClone</span>(target[key]));</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">result = target;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> deepObj = <span class="title function_">deepClone</span>(obj);</span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(obj);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;------------------------&quot;</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(deepObj);</span><br></pre></td></tr></table></figure><p>控制台看下效果：<br><img src="https://cdn.zhangone.site/PhotoBed/img/blog/JS/deepClone/JS-deepClone.png"></p><p>修改下数据试一试</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">deepObj[<span class="number">0</span>].<span class="property">name</span> = <span class="string">&quot;CC&quot;</span>;</span><br><span class="line">deepObj[<span class="number">1</span>].<span class="property">age</span> = <span class="literal">null</span>;</span><br><span class="line">deepObj[<span class="number">2</span>].<span class="property">count</span> = <span class="number">888</span>;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/JS/deepClone/JS-deepClone-change.png"></p></li></ol><p><strong>感觉还行，可以看到最终拷贝的结果是<code>null</code>、<code>undefinde</code>、<code>function</code>、<code>RegExp</code>等特殊的值也全部拷贝成功了，而且修改里边的值也不会有任何问题的</strong></p><p><strong>到这里就实现了一个简单的深拷贝，当然，我也只是简单实现一下，还有很多问题没有解决，只是一个思路</strong></p><p>嗝~</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;JS中数据类型的简单介绍&quot;&gt;&lt;a href=&quot;#JS中数据类型的简单介绍&quot; class=&quot;headerlink&quot; title=&quot;JS中数据类型的简单介绍&quot;&gt;&lt;/a&gt;JS中数据类型的简单介绍&lt;/h2&gt;&lt;p&gt;在JS中，数据类型分为基本数据类型和引用数据类型两种，对于基本数据类型来说，它的值直接存储在栈内存中，而对于引用类型来说，它在栈内存中仅仅存储了一个引用，而真正的数据存储在堆内存中&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://zhangone.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS-ES3-ES5-经典三种设计模式</title>
    <link href="https://zhangone.site/posts/baa6c12d/"/>
    <id>https://zhangone.site/posts/baa6c12d/</id>
    <published>2019-07-06T09:15:36.000Z</published>
    <updated>2019-07-06T09:15:36.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS中的单例设计模式"><a href="#JS中的单例设计模式" class="headerlink" title="JS中的单例设计模式"></a>JS中的单例设计模式</h3><span id="more"></span><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在没有对象和函数等引用数据类型的时候，我们只能基于创建变量的方式来描述某一件事务，某一个个体的相关信息  </span></span><br><span class="line"><span class="comment">// 这样会大量创建全局变量，最后导致全局变量的冲突（全局变量污染）</span></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;张三&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">25</span>;</span><br><span class="line"><span class="keyword">var</span> height = <span class="string">&quot;180cm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> name = <span class="string">&quot;李四&quot;</span>;</span><br><span class="line"><span class="keyword">var</span> age = <span class="number">28</span>;</span><br><span class="line"><span class="keyword">var</span> height = <span class="string">&quot;175cm&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 我们期望能够把描述一个事务的相关信息能够分组（或分类）来管理，此时对象数据类型就起到了很大的作用</span></span><br><span class="line"><span class="comment">// 分组之后，每一组中的键值对都是私有的，即使两组之间有相同名字的属性，也不会冲突，大大解决了全局变量污染的问题  =&gt; “这种分组管理的概念，就是JS中最早的单例设计模式思想”</span></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">25</span>,</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">28</span>,</span><br><span class="line">...</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * 基于对象数据类型，把描述当前事务的属性和方法统一放在一起分组管理，能够减少全局变量污染，这种JS设计模式就是“单例设计模式”</span></span><br><span class="line"><span class="comment"> *  1. 每一个对象都是一个单独的实例（单独的堆内存），存储的键值对都是堆中私有的内容，所以两个实例之间不会有任何的冲突</span></span><br><span class="line"><span class="comment"> *  2. 在单例设计模式中，有一些新的概念，在下述案例中：obj不仅仅是一个变量存储对象（对象名），也被成为“命名空间”（其实就是给对象的堆内存设置一个obj的名字，堆内存是空间，obj是名字），把描述当前事务的属性和方法，放到空间中进行分组管理</span></span><br><span class="line"><span class="comment"> *     var obj = &#123; xxx:xxx , ...&#125;;</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 在其它的编程语言中，认为只有基于构造函数构造出来的实例才能被称为“单例设计模式”，也就是 var xxx = new xxx; 但是在JS中，var obj=&#123;...&#125;; 本身就是基于 new Object() 构建出来的，所以是标准的单例设计模式；</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// + 单例设计模式也是最基础的模块化思想</span></span><br><span class="line"><span class="comment">// + AMD/CMD（requireJS和seaJS）</span></span><br><span class="line"><span class="comment">// + UMD</span></span><br><span class="line"><span class="comment">// + CommonJS</span></span><br><span class="line"><span class="comment">// + ES6Module</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 基于单例设计模式思想 + 闭包思想 + 模块管理思想 (高级单例模式)</span></span><br><span class="line"><span class="keyword">var</span> utils = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryElement</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">deleteElement</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 导出当前版块中需要供别人调取的属性方法（也相当于把这些属性方法放到utils命名空间下进行分组管理，避免和别人的冲突）</span></span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">queryElement</span>:queryElement,</span><br><span class="line"><span class="attr">deleteElement</span>:deleteElement</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> searchModule = (<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">queryData</span>(<span class="params"></span>)&#123;&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">bindHTML</span>(<span class="params"></span>)&#123;</span><br><span class="line"><span class="comment">//=&gt;需要调取utils模块（命名空间中的方法）</span></span><br><span class="line">utils.<span class="title function_">queryElement</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &#123;</span><br><span class="line"><span class="attr">init</span>:<span class="keyword">function</span>(<span class="params"></span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><h3 id="工厂设计模式"><a href="#工厂设计模式" class="headerlink" title="工厂设计模式"></a>工厂设计模式</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 基于 “单例设计模式” 记录人员信息：创建单独的实例或者命名空间，把描述每个人的信息分组管理即可实现</span></span><br><span class="line"><span class="comment">// 缺陷：每当描述一个事务的信息，需要把对应的键值对都去编写一下，如果重复描述相似事务的信息，不仅需要重复做很多事情，而且还会导致代码的冗余.</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;张三&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">92</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"><span class="attr">score</span>:<span class="number">90</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person2 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;李四&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">62</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;男&#x27;</span>,</span><br><span class="line"><span class="attr">score</span>:<span class="number">85</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person3 = &#123;</span><br><span class="line"><span class="attr">name</span>:<span class="string">&#x27;王二&#x27;</span>,</span><br><span class="line"><span class="attr">age</span>:<span class="number">18</span>,</span><br><span class="line"><span class="attr">sex</span>:<span class="string">&#x27;女&#x27;</span>,</span><br><span class="line"><span class="attr">score</span>:<span class="number">100</span>，</span><br><span class="line"><span class="attr">qunzi</span>:<span class="string">&#x27;red&#x27;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 所谓工厂设计模式，是在需要创建很多“相似实例”的情境下，让我们告别手动创建，而实现工业化批量生产（提高开发效率、减少了页面中的冗余代码 =&gt; “低耦合高内聚” =&gt; 函数封装）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createPerson</span>(<span class="params">name, age, sex, score, qunzi</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> person = &#123;&#125;;</span><br><span class="line">person.<span class="property">name</span> = name;</span><br><span class="line">person.<span class="property">age</span> = age;</span><br><span class="line">person.<span class="property">sex</span> = sex;</span><br><span class="line">person.<span class="property">score</span> = score;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">typeof</span> qunzi !== <span class="string">&quot;undefined&quot;</span>) &#123;</span><br><span class="line"><span class="comment">// 传递了qunzi 形参对应的实参值</span></span><br><span class="line">person.<span class="property">qunzi</span> = qunzi;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> person;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person1 = <span class="title function_">createPerson</span>(<span class="string">&#x27;张三&#x27;</span>,<span class="number">92</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">90</span>);</span><br><span class="line"><span class="keyword">var</span> person2 = <span class="title function_">createPerson</span>(<span class="string">&#x27;李四&#x27;</span>,<span class="number">62</span>,<span class="string">&#x27;男&#x27;</span>,<span class="number">85</span>);</span><br><span class="line"><span class="keyword">var</span> person3 = <span class="title function_">createPerson</span>(<span class="string">&#x27;王二&#x27;</span>,<span class="number">18</span>,<span class="string">&#x27;女&#x27;</span>,<span class="number">100</span>,<span class="string">&#x27;red&#x27;</span>);</span><br></pre></td></tr></table></figure><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><blockquote><p>编程语言：</p><ul><li>OOP（Object Oriented Programming）面向对象程序设计<ul><li>JAVA</li><li>PHP</li><li>PYTHON &#x2F; GO &#x2F; RUBY</li><li>JAVASCRIPT &#x2F; NODE.JS</li><li>…</li></ul></li><li>POP（Procedure Oriented） 面向过程程序设计<ul><li>C语言</li></ul></li></ul></blockquote><p>面向对象程序设计中的三大概念：</p><ul><li>对象：泛指，JS中我们操作和研究的事务都是对象</li><li>类：把抽象的对象，按照功能特点，进行的详细划分，划分成为很多的类别</li><li>实例：每一种类别中具体的事务</li></ul><h4 id="JS中内置类"><a href="#JS中内置类" class="headerlink" title="JS中内置类"></a>JS中内置类</h4><blockquote><p>根据JS中事务的特征，进行类别划分，而默认划分好的类别，就是内置类</p></blockquote><ul><li><p>数据类型中的内置类</p><ul><li><code>Number</code>类：每一个数字都是这个类的一个实例</li><li><code>String</code> 类</li><li><code>Boolean</code> 类</li><li><code>Null</code> 类 &#x2F; <code>Undefined</code> 类（浏览器中进制我们自己访问这两个类）</li><li><code>Symbol</code> 类</li><li><code>Object</code>  对象数据类型类：所有的对象数据类型都是这个类的一个实例<ul><li><code>Object &#123;&#125;</code>普通对象就是它的实例 </li><li><code>Array</code> 数组类  每一个数组是<code>Array</code>类的实例也是<code>Object</code>类的实例</li><li><code>RegExp</code>正则类</li><li><code>Date</code>日期类</li><li>…</li></ul></li><li><code>Function</code>类：所有的函数都是这个类的实例</li><li>… 其它</li></ul></li><li><p><strong>DOM</strong>元素对象或者<strong>DOM</strong>元素集合也都有自己的内置类<br>  …</p><ul><li><p><code>Node</code> 节点类</p><ul><li><code>Element</code> 元素标签类<ul><li><code>HTMLElement</code> HTML元素标签类<ul><li><code>HTMLDivElement</code> 每一个DIV元素对象是它的一个实例</li><li><code>HTMLAnchorElement</code> 每个A元素对象是它的一个实例</li><li>每一个元素标签对象都有一个自己对应的内置类</li></ul></li><li><code>XMLElement</code></li><li>…</li></ul></li><li><code>Text</code> 文本节点类</li><li><code>Document</code> 文档节点类<ul><li><code>HTMLDocument</code> 每一个document都是它的一个实例</li></ul></li><li>…</li></ul></li><li><p><code>HTMLCollection</code> 元素集合类：基于<code>getElementsByTagName</code>等方法获取到的元素集合都是它的一个实例</p></li><li><p><code>NodeList</code> 节点集合类</p></li></ul></li><li><p>…</p></li></ul><p>JS本身就是按照“面向对象思想（类和实例）”设计出来的语言，所以不论是研究或是学习JS，还是在工作中进行开发，也都应该按照面向对象的思想来学习和开发，例如：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 我想研究数组 */</span></span><br><span class="line"><span class="comment">// 1.每一个数组都是Array这个类的实例，每个实例都是单独的一个个体（互相是不冲突的，类似于没有一模一样的两个人，在JS中也基本上没有完全一样的两个实例[会有特殊情况]）</span></span><br><span class="line"><span class="comment">// 2.我们拿出某一个实例去分析其特点和结构，那么Array的其它实例也具备相同的特点和结构</span></span><br><span class="line"><span class="comment">// 3.数组中有很多浏览器内置的方法，这些方法都是类提供给实例的，每一个实例都能具备和使用这些方法（前提是当前类的实例才能使用，如果不是它的实例，则不能使用）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">12</span>,<span class="number">23</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">12</span>,<span class="number">23</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1 === arr2); <span class="comment">// false 不同的堆内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// push 是 Array 这个类提供的方法，只要是 Array 类的实例（数组是它的实例）都可以调用这些方法</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="number">30</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">//=&gt;[10,20,30]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// arguments 不是 Array 的实例，不能调它提供的方法</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">func</span>(<span class="params"></span>) &#123;</span><br><span class="line"><span class="comment">// arguments 实参集合中存储了传递的实参信息，它是一个类数组（类似于数组的结构，但是它不是数组，不是Array类的实例）</span></span><br><span class="line"><span class="variable language_">arguments</span>.<span class="title function_">push</span>(<span class="number">30</span>); <span class="comment">// Uncaught TypeError: arguments.push is not a function</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">arguments</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_">func</span>(<span class="number">10</span>, <span class="number">20</span>);</span><br></pre></td></tr></table></figure><h3 id="构造函数模式：基于构造函数，创建自定义类和创建类的相关实例"><a href="#构造函数模式：基于构造函数，创建自定义类和创建类的相关实例" class="headerlink" title="构造函数模式：基于构造函数，创建自定义类和创建类的相关实例"></a>构造函数模式：基于构造函数，创建自定义类和创建类的相关实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 约定规范：类名的第一个字母一般都是大写的</span></span><br><span class="line"><span class="comment">// 1.构造函数执行，由于具备普通函数特征，所以在私有上下文中可能会出现一些私有变量，但是这些私有变量和实例没有必然的联系，私有上下文中的 this 才是实例，所以只有写 this.xxx = xxx 的操作，才是给实例设置私有属性；  实例的私有属性和上下文中的私有变量不是一个东西</span></span><br><span class="line"><span class="comment">// 2. 当前类的每一个实例都是单独的一个对象，实例和实例之间是独立的</span></span><br><span class="line"><span class="comment">// 3. 在构造函数的函数体中，基于 this.xxx = xxx 给实例设置的属性和方法都是自己私有的，和其它实例中的属性和方法不冲突</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Fn</span>(<span class="params">x</span>) &#123;</span><br><span class="line"><span class="keyword">let</span> y = <span class="number">20</span>;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">total</span> = x + y;</span><br><span class="line"><span class="variable language_">this</span>.<span class="property">say</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`<span class="subst">$&#123;x&#125;</span> + <span class="subst">$&#123;y&#125;</span> = <span class="subst">$&#123;<span class="variable language_">this</span>.total&#125;</span>`</span>);</span><br><span class="line">&#125;;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> f1 = <span class="title class_">Fn</span>(<span class="number">10</span>); <span class="comment">// f1=undefined</span></span><br><span class="line"><span class="keyword">let</span> f2 = <span class="keyword">new</span> <span class="title class_">Fn</span>(<span class="number">10</span>); <span class="comment">// f2实例对象</span></span><br><span class="line"><span class="keyword">let</span> f3 = <span class="keyword">new</span> <span class="title class_">Fn</span>(<span class="number">20</span>); <span class="comment">// f3实例对象</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="property">total</span>); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="property">x</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f3.<span class="property">y</span>); <span class="comment">// undefined</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1 === f2); <span class="comment">// false</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f2 === f3); <span class="comment">// false</span></span><br><span class="line">f2.<span class="title function_">say</span>(); <span class="comment">// &quot;10+20=30&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f2.<span class="property">say</span> === f3.<span class="property">say</span>); <span class="comment">// false  都是当前实例的私有属性和方法（所有出现在构造函数的函数体中的 this.xxx = xxx 操作，都是设置私有的属性和方法）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(f1.<span class="property">total</span>); <span class="comment">// Uncaught TypeError: Cannot read property &#x27;total&#x27; of undefined  f1不是对象，只有对象才能操作键值对</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="variable language_">window</span>.<span class="property">total</span>); <span class="comment">// 30</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="title function_">say</span>(); <span class="comment">// &quot;10 + 20 = 30&quot; </span></span><br></pre></td></tr></table></figure><p>每一个函数都内置具备一个属性：<code>prototype</code>（原型），<code>prototype</code>的属性值是一个对象（浏览器默认会给其一个堆内存） &#x3D;&gt; “原型对象上所存储的属性和方法，就是供当前类实例所调用的公有的属性和方法”</p><ul><li>普通函数</li><li>类也是函数类型的值</li></ul><p>在类的<code>prototype</code>原型对象中，默认存在一个内置的属性：<code>constructor</code>（构造函数），属性值就是当前类(函数)本身，所以我们也把类称为构造函数</p><p>每一个对象都天生具备一个属性：<code>__proto__</code>（原型链指向），属性值是当前实例（对象）所属类的<code>prototype</code>原型</p><ul><li>对象数据类型值<ul><li>普通对象</li><li>数组对象</li><li>正则对象</li><li>…</li></ul></li><li>实例也是对象类型值（除基本值外）</li><li>类的<code>prototype</code>原型属性值也是对象</li><li>函数也具备对象的特征（它有一重身份就是对象类型）</li><li>…</li></ul><p>所有的对象数据类型值，都是内置类Object的一个实例</p><p>了解ES6-Class &#x3D;&#x3D;&gt; <a href="https://es6.ruanyifeng.com/#docs/class">阮一峰ES6教程–关于 Class定义类</a></p>]]></content>
    
    
    <summary type="html">&lt;h3 id=&quot;JS中的单例设计模式&quot;&gt;&lt;a href=&quot;#JS中的单例设计模式&quot; class=&quot;headerlink&quot; title=&quot;JS中的单例设计模式&quot;&gt;&lt;/a&gt;JS中的单例设计模式&lt;/h3&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="JavaScript" scheme="https://zhangone.site/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS3-flex布局</title>
    <link href="https://zhangone.site/posts/ca7f6989/"/>
    <id>https://zhangone.site/posts/ca7f6989/</id>
    <published>2019-06-06T04:04:06.000Z</published>
    <updated>2019-06-06T04:04:06.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1、-flex-布局的出现"><a href="#1、-flex-布局的出现" class="headerlink" title="1、 flex 布局的出现"></a>1、 <code>flex</code> 布局的出现</h4><blockquote><p>布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。<br>2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。</p></blockquote><span id="more"></span><h4 id="2、flex布局的兼容性问题"><a href="#2、flex布局的兼容性问题" class="headerlink" title="2、flex布局的兼容性问题"></a>2、flex布局的兼容性问题</h4><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-compatibility.png"><br><br />注意：设为<code>Flex</code>布局以后，子元素的<code>float</code>、<code>clear</code>和<code>vertical-align</code>属性将失效。<br><a name="QWDNs"></a></p><h4 id="3、flex-布局的定义"><a href="#3、flex-布局的定义" class="headerlink" title="3、flex 布局的定义"></a>3、flex 布局的定义</h4><p><code>Flex</code>是<code>Flexible Box</code>的缩写，意为”弹性布局”，用来为盒状模型提供最大的灵活性。<br />任何一个容器都可以指定为Flex布局。flex 布局有两个值：</p><ul><li><code>display: flex</code>; 代表的是块级<br /></li><li><code>display: inline-flex</code>; 代表的是行内块<br /><blockquote><p>下面的例子证明，<code>display:flex;</code> 的时候，两个div是上下排列的，但是如果是<code>display：inline-flex;</code> 的时候是左右排列的</p></blockquote></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">      flex 布局有两个值：</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      display:flex;代表的是块级</span></span></span><br><span class="line"><span class="comment"><span class="language-css">      display:inline-flex;代表的是行内块</span></span></span><br><span class="line"><span class="comment"><span class="language-css">    */</span></span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box1</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>:green;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>:inline-flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">  </span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box2</span>&#123;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">width</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">height</span>: <span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">background</span>:pink;</span></span><br><span class="line"><span class="language-css">      <span class="attribute">display</span>:inline-flex;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box1&quot;</span>&gt;</span>box1<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box2&quot;</span>&gt;</span>box2<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="4、flex-布局的基本概念"><a href="#4、flex-布局的基本概念" class="headerlink" title="4、flex 布局的基本概念"></a>4、flex 布局的基本概念</h4><p>采用<code>Flex</code>布局的元素，称为<code>Flex容器（flex container）</code>，简称”容器”。它的所有子元素自动成为容器成员，称为<code>Flex项目（flex item）</code>，简称”项目”。<br /><br><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-1.png"><br><br /></p><p>容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。主轴的开始位置（与边框的交叉点)叫做<code>main start</code>，结束位置叫做<code>main end</code>；交叉轴的开始位置叫做<code>cross start</code>，结束位置叫做<code>cross end</code>。</p><h4 id="5、容器的属性"><a href="#5、容器的属性" class="headerlink" title="5、容器的属性"></a>5、容器的属性</h4><ul><li><code>flex-direction</code><br /></li><li><code>flex-wrap</code><br /></li><li><code>flex-flow</code><br /></li><li><code>justify-content</code><br /></li><li><code>align-items</code><br /></li><li><code>align-content</code><br /></li></ul><h5 id="5-1-flex-direction属性"><a href="#5-1-flex-direction属性" class="headerlink" title="5.1 flex-direction属性:"></a>5.1 <code>flex-direction</code>属性:</h5><p>设置主轴的方向</p><ul><li><code>row</code>：主轴的方向是水平，从从左到右<br /></li><li><code>column</code>：主轴的方向是垂直的，从上到下<br /></li><li><code>row-reverse</code>：主轴的方向是水平，从右到左<br /></li><li><code>column-reverse</code>：主轴的方向是垂直的，从下到上<br /></li></ul><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-2.png"></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>:flex;</span></span><br><span class="line"><span class="language-css">        <span class="comment">/* flex-direction: row; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* flex-direction: column; */</span></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* flex-direction: row-reverse; */</span></span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-direction</span>: column-reverse;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">100px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>:green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>:<span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-2-flex-wrap"><a href="#5-2-flex-wrap" class="headerlink" title="5.2 flex-wrap:"></a>5.2 <code>flex-wrap</code>:</h5><ul><li><code>wrap</code>: 换行<br /></li><li><code>nowrap</code>: 不换行（默认）<br /></li><li><code>wrap-reverse</code>：换行，不过第一行在最下面<br /></li></ul><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-3.png"> </p><h5 id="5-3-flex-flow"><a href="#5-3-flex-flow" class="headerlink" title="5.3 flex-flow"></a>5.3<code> flex-flow</code></h5><p><code>flex-flow</code>属性是<code>flex-direction</code>属性和<code>flex-wrap</code>属性的简写形式，默认值为<code>row nowrap</code>。</p><blockquote><p>flex-flow: row wrap; 写了这个之后，下面的案例效果跟上一个一样</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>flex-flow<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    * &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:<span class="number">0</span>; <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">      flex-flow 是flex-direction 和flex-wrap 的简写</span></span></span><br><span class="line"><span class="comment"><span class="language-css">     */</span></span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span>,<span class="selector-tag">ol</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">display</span>: flex;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">flex-flow</span>: row wrap</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-tag">ul</span>&gt;<span class="selector-tag">li</span> &#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>: green;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-left</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin-bottom</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="5-4-justify-content属性定义了项目在主轴上的对齐方式。"><a href="#5-4-justify-content属性定义了项目在主轴上的对齐方式。" class="headerlink" title="5.4 justify-content属性定义了项目在主轴上的对齐方式。"></a>5.4 <code>justify-content</code>属性定义了项目在主轴上的对齐方式。</h5><p><code>justify-content</code>:<code> flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>space-between</code> | <code>space-around</code>| <code>space-evenly</code> ;<br /></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-4.png"></p><p>​<img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-5.png"> </p><p><code>space-evenly</code><br>    <img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-6.png"></p><h5 id="5-5-align-items属性："><a href="#5-5-align-items属性：" class="headerlink" title="5.5 align-items属性："></a>5.5 <code>align-items</code>属性：</h5><p><code>align-items</code>属性定义项目在交叉轴上如何对齐。 </p><p><code>align-items</code>: <code> flex-start</code> | <code>flex-end</code> | <code>center</code> | <code>baseline</code> | <code>stretch</code>;<br><br /><code>stretch</code>（默认值）：如果项目未设置高度或设为<code>auto</code>，将占满整个容器的高度。<br /><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-7.png"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-8.png"></p><h5 id="5-6-align-content属性"><a href="#5-6-align-content属性" class="headerlink" title="5.6 align-content属性"></a>5.6 <code>align-content</code>属性</h5><p><code>align-content</code>属性定义了多根轴线的对齐方式。如果项目只有一根轴线，该属性不起作用。（也就是说得有项目换行）<br /><br><code>align-content: flex-start | flex-end | center | space-between | space-around | stretch</code>; <img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-9.png"></p><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-10.png"></p><h4 id="6、项目的属性"><a href="#6、项目的属性" class="headerlink" title="6、项目的属性"></a>6、项目的属性</h4><p>以下6个属性设置在项目上。</p><ul><li><code>order</code><br /></li><li><code>flex-grow</code><br /></li><li><code>flex-shrink</code><br /></li><li><code>flex-basis</code><br /></li><li><code>flex</code><br /></li><li><code>align-self</code><br /></li></ul><h5 id="6-1-order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。"><a href="#6-1-order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。" class="headerlink" title="6.1 order属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。"></a>6.1 <code>order</code>属性定义项目的排列顺序。数值越小，排列越靠前，默认为0。</h5><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-10.png"></p><h5 id="6-2-flex-grow属性"><a href="#6-2-flex-grow属性" class="headerlink" title="6.2 flex-grow属性"></a>6.2 <code>flex-grow</code>属性</h5><p><code>flex-grow</code>属性定义项目的放大比例，默认为0，即如果存在剩余空间，也不放大。 <br />如果所有项目的<code>flex-grow</code>属性都为1，则它们将等分剩余空间（如果有的话)。如果一个项目的<code>flex-grow</code>属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"><span class="attribute">flex-grow</span>: &lt;number&gt;; <span class="comment">/* default 0 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-12.png"></p><h5 id="6-3-flex-shrink属性"><a href="#6-3-flex-shrink属性" class="headerlink" title="6.3 flex-shrink属性"></a>6.3 <code>flex-shrink</code>属性</h5><p><code>flex-shrink</code>属性定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"><span class="attribute">flex-shrink</span>: &lt;number&gt;; <span class="comment">/* default 1 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-13.png"></p><p>如果所有项目的<code>flex-shrink</code>属性都为1，当空间不足时，都将等比例缩小。如果一个项目的<code>flex-shrink</code>属性为0，其他项目都为1，则空间不足时，前者不缩小。<br />负值对该属性无效。</p><br /><h5 id="6-4-flex-basis属性"><a href="#6-4-flex-basis属性" class="headerlink" title="6.4 flex-basis属性"></a>6.4 <code>flex-basis</code>属性</h5><p><code>flex-basis</code>属性定义了在分配多余空间之前，项目占据的主轴空间（main size）。浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为<code>auto</code>，即项目的本来大小。它可以设为跟<code>width</code>或<code>height</code>属性一样的值（比如350px），则项目将占据固定空间。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"><span class="attribute">flex-basis</span>: &lt;length&gt; | auto; <span class="comment">/* default auto */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="6-5-flex属性"><a href="#6-5-flex属性" class="headerlink" title="6.5 flex属性"></a>6.5 <code>flex属性</code></h5><p>flex属性是<code>flex-grow</code>, <code>flex-shrink</code> 和<code> flex-basis</code>的简写，默认值为0 1 auto。后两个属性可选。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"><span class="attribute">flex</span>: none | [ &lt;<span class="string">&#x27;flex-grow&#x27;</span>&gt; &lt;<span class="string">&#x27;flex-shrink&#x27;</span>&gt;? || &lt;<span class="string">&#x27;flex-basis&#x27;</span>&gt; ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>flex：0 1 auto</code>；默认值<br><code>flex：none</code>； 代表的意思等同于 flex：0 0 auto；<br><code>flex：auto</code>；代表的意思是flex：1 1 auto；<br><code>flex：number</code>；当flex取值为一个非负数字，则该数字为<code>flex-grow</code>的值，<code>flex-shrink</code>的值为1，<code>flex-basis</code>的值为0%；</p><h5 id="6-6-align-self属性"><a href="#6-6-align-self属性" class="headerlink" title="6.6 align-self属性"></a>6.6 <code>align-self</code>属性</h5><p><code>align-self</code>属性允许单个项目有与其他项目不一样的对齐方式，可覆盖<code>align-items</code>属性。默认值为<code>auto</code>，表示继承父元素的<code>align-items</code>属性，如果没有父元素，则等同于<code>stretch</code>。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.item</span> &#123;</span><br><span class="line"><span class="attribute">align-self</span>: auto | flex-start | flex-end | center | baseline | stretch;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/flex-14.png"></p>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;1、-flex-布局的出现&quot;&gt;&lt;a href=&quot;#1、-flex-布局的出现&quot; class=&quot;headerlink&quot; title=&quot;1、 flex 布局的出现&quot;&gt;&lt;/a&gt;1、 &lt;code&gt;flex&lt;/code&gt; 布局的出现&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;布局的传统解决方案，基于盒状模型，依赖 display 属性 + position 属性 + float 属性。它对于那些特殊布局非常不方便，比如，垂直居中就不容易实现。&lt;br&gt;2009年，W3C提出了一种新的方案—-Flex布局，可以简便、完整、响应式地实现各种页面布局。&lt;/p&gt;
&lt;/blockquote&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS3" scheme="https://zhangone.site/tags/CSS3/"/>
    
  </entry>
  
  <entry>
    <title>CSS-媒体查询</title>
    <link href="https://zhangone.site/posts/762ab198/"/>
    <id>https://zhangone.site/posts/762ab198/</id>
    <published>2019-04-27T02:27:42.000Z</published>
    <updated>2019-04-27T02:27:42.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="视口（viewport）"><a href="#视口（viewport）" class="headerlink" title="视口（viewport）"></a>视口（viewport）</h4><p>当我们不加视口的时候，模拟移动端，body的宽度默认是980px,并不是手机屏幕的宽度，如果想要把页面在手机屏幕中显示完全，就会进行缩放，这样的话，里面的文字等就会看不清楚，为了避免这种情况，通常都会加视口，让页面的宽度等于手机屏幕的宽度。</p><span id="more"></span><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.zhangone.site/PhotoBed/img/blog/CSS3/media1.png"></p><h4 id="媒体查询"><a href="#媒体查询" class="headerlink" title="媒体查询"></a>媒体查询</h4><p>@media 针对不同媒体类型可以定制不同的样式规则。 例如：你可以针对不同的媒体类型(包括显示器、便携设备、电视机，等等)设置不同的样式规则。 但是这些多媒体类型在很多设备上支持还不够友好。</p><blockquote><p>@media not|only mediatype and (expressions) { CSS 代码…; }</p></blockquote><ul><li>媒体类型<ul><li><code>all</code>用于所有设备</li><li><code>print</code>用于打印机和打印预览</li><li><code>screen</code>用于电脑屏幕，平板电脑，智能手机等。</li><li><code>speech</code>应用于屏幕阅读器等发声设备</li><li>还有一些已经废弃的类型就不再列举了  <br/></li></ul></li><li>媒体功能<ul><li><code>aspect-ratio</code>   定义输出设备中的页面可见区域宽度与高度的比率</li><li><code>color</code>定义输出设备每一组彩色原件的个数。如果不是彩色设备，则值等于0</li><li><code>color-index</code>定义在输出设备的彩色查询表中的条目数。如果没有使用彩色查询表，则值等于0</li><li><code>device-aspect-ratio</code>定义输出设备的屏幕可见宽度与高度的比率。</li><li><code>device-height</code>定义输出设备的屏幕可见高度。</li><li><code>device-width</code>定义输出设备的屏幕可见宽度。</li><li><code>grid</code>用来查询输出设备是否使用栅格或点阵。</li><li><code>height</code>定义输出设备中的页面可见区域高度。</li><li><code>max-aspect-ratio</code>定义输出设备的屏幕可见宽度与高度的最大比率。</li><li><code>max-color</code>定义输出设备每一组彩色原件的最大个数。</li><li><code>max-color-index</code>定义在输出设备的彩色查询表中的最大条目数。</li><li><code>max-device-aspect-ratio</code>定义输出设备的屏幕可见宽度与高度的最大比率。</li><li><code>max-device-height</code>定义输出设备的屏幕可见的最大高度。</li><li><code>max-device-width</code>定义输出设备的屏幕最大可见宽度。</li><li><code>max-height</code>定义输出设备中的页面最大可见区域高度。</li><li><code>max-monochrome</code>定义在一个单色框架缓冲区中每像素包含的最大单色原件个数。</li><li><code>max-resolution</code>定义设备的最大分辨率。</li><li><code>max-width</code>定义输出设备中的页面最大可见区域宽度。</li><li><code>min-aspect-ratio</code>定义输出设备中的页面可见区域宽度与高度的最小比率。</li><li><code>min-color</code>   定义输出设备每一组彩色原件的最小个数。</li><li><code>min-color-index</code>定义在输出设备的彩色查询表中的最小条目数。</li><li><code>min-device-aspect-ratio</code>定义输出设备的屏幕可见宽度与高度的最小比率。</li><li><code>min-device-width</code>定义输出设备的屏幕最小可见宽度。</li><li><code>min-device-height</code>定义输出设备的屏幕的最小可见高度。</li><li><code>min-height</code>定义输出设备中的页面最小可见区域高度。</li><li><code>min-monochrome</code>定义在一个单色框架缓冲区中每像素包含的最小单色原件个数</li><li><code>min-resolution</code>定义设备的最小分辨率。</li><li><code>min-width</code>定义输出设备中的页面最小可见区域宽度。</li><li><code>monochrome</code>定义在一个单色框架缓冲区中每像素包含的单色原件个数。如果不是单色设备，则值等于0</li><li><code>orientation</code>定义输出设备中的页面可见区域高度是否大于或等于宽度。</li><li><code>resolution</code>定义设备的分辨率。如：96dpi, 300dpi, 118dpcm</li><li><code>scan</code> 定义电视类设备的扫描工序。</li><li><code>width</code>定义输出设备中的页面可见区域宽度。</li></ul></li></ul><p>直接上代码</p><p><strong>媒体查询案例1</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>:green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="comment">/* </span></span></span><br><span class="line"><span class="comment"><span class="language-css">       当屏幕的宽度小于600px的时候，我就让.box 这个盒子背景颜色pink</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">     */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">     <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">600px</span>)&#123;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">             <span class="attribute">background</span>:pink;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css">     <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">700px</span>)&#123;</span></span><br><span class="line"><span class="language-css">         <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">             <span class="attribute">background</span>:gold;</span></span><br><span class="line"><span class="language-css">         &#125;</span></span><br><span class="line"><span class="language-css">     &#125;</span></span><br><span class="line"><span class="language-css">     <span class="comment">/* 大于等300 小于等于800 */</span></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">300px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">800</span>)&#123;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css"><span class="comment">/* 需求：小于768px的时候显示一个颜色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">             大于768到1200 显示一个颜色</span></span></span><br><span class="line"><span class="comment"><span class="language-css">             大于1200的时候显示一个颜色 </span></span></span><br><span class="line"><span class="comment"><span class="language-css">            */</span></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>媒体查询案例2</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;X-UA-Compatible&quot;</span> <span class="attr">content</span>=<span class="string">&quot;ie=edge&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">    *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span>;<span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">width</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">height</span>:<span class="number">200px</span>;</span></span><br><span class="line"><span class="language-css">        <span class="attribute">background</span>:green;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">768px</span>)&#123;</span></span><br><span class="line"><span class="language-css">       <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background</span>:pink;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">769px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1200px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background</span>:gold;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1201px</span>)&#123;</span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&#123;</span></span><br><span class="line"><span class="language-css">           <span class="attribute">background</span>:darkseagreen;</span></span><br><span class="line"><span class="language-css">       &#125;</span></span><br><span class="line"><span class="language-css">    &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- </span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">         /* 需求：小于768px的时候显示一个颜色</span></span><br><span class="line"><span class="comment">             大于768到1200 显示一个颜色</span></span><br><span class="line"><span class="comment">             大于1200的时候显示一个颜色 </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"><span class="comment">     --&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>媒体查询案例3</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;en&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Document<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        *&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>:<span class="number">0</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">ul</span>,<span class="selector-tag">ol</span>&#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">list-style</span>: none;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.box</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">width</span>:<span class="number">12.5%</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">height</span>:<span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">text-align</span>: center;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">line-height</span>: <span class="number">50px</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">border</span>:<span class="number">1px</span> solid lightgreen;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">float</span><span class="selector-pseudo">:left</span>;</span></span><br><span class="line"><span class="language-css">          <span class="attribute">box-sizing</span>:border-box;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="comment">/* 大于等于1200 的时候显示8个</span></span></span><br><span class="line"><span class="comment"><span class="language-css">           大于等于900 小于1200的时候显示4个</span></span></span><br><span class="line"><span class="comment"><span class="language-css">           大于等于768px 小于900的时候显示2个</span></span></span><br><span class="line"><span class="comment"><span class="language-css">           小于768px 的时候显示一个</span></span></span><br><span class="line"><span class="comment"><span class="language-css"></span></span></span><br><span class="line"><span class="comment"><span class="language-css">         */</span></span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">1200px</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.box</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>:<span class="number">12.5%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">900px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">1199px</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.box</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>:<span class="number">25%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width</span>:<span class="number">768px</span>) <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">899px</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.box</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>:<span class="number">50%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width</span>:<span class="number">767px</span>)&#123;</span></span><br><span class="line"><span class="language-css">            <span class="selector-class">.box</span>&gt;<span class="selector-tag">li</span>&#123;</span></span><br><span class="line"><span class="language-css">                <span class="attribute">width</span>:<span class="number">100%</span>;</span></span><br><span class="line"><span class="language-css">            &#125;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>3<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>4<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>5<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>6<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>7<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">li</span>&gt;</span>8<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;h4 id=&quot;视口（viewport）&quot;&gt;&lt;a href=&quot;#视口（viewport）&quot; class=&quot;headerlink&quot; title=&quot;视口（viewport）&quot;&gt;&lt;/a&gt;视口（viewport）&lt;/h4&gt;&lt;p&gt;当我们不加视口的时候，模拟移动端，body的宽度默认是980px,并不是手机屏幕的宽度，如果想要把页面在手机屏幕中显示完全，就会进行缩放，这样的话，里面的文字等就会看不清楚，为了避免这种情况，通常都会加视口，让页面的宽度等于手机屏幕的宽度。&lt;/p&gt;</summary>
    
    
    
    <category term="前端" scheme="https://zhangone.site/categories/%E5%89%8D%E7%AB%AF/"/>
    
    
    <category term="CSS3" scheme="https://zhangone.site/tags/CSS3/"/>
    
  </entry>
  
</feed>
